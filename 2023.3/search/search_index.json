{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SIB course Single Cell Transcriptomics","text":""},{"location":"#teachers","title":"Teachers","text":"<ul> <li>Tania Wyss  </li> <li>Rachel Marcone-Jeitziner  </li> <li>Geert van Geest  </li> </ul>"},{"location":"#authors","title":"Authors","text":"<ul> <li>Tania Wyss  </li> <li>Rachel Marcone-Jeitziner  </li> <li>Geert van Geest  </li> <li>Patricia Palagi  </li> </ul>"},{"location":"#attribution","title":"Attribution","text":"<p>Parts of this course are inspired by the Broad Institute Single Cell Workshop, the CRUK CI Introduction to single-cell RNA-seq data analysis course and courses previously developed by Walid Gharib at SIB. </p>"},{"location":"#license-copyright","title":"License &amp; copyright","text":"<p>License: CC BY-SA 4.0</p> <p>Copyright: SIB Swiss Institute of Bioinformatics</p>"},{"location":"#learning-outcomes","title":"Learning outcomes","text":""},{"location":"#general-learning-outcomes","title":"General learning outcomes","text":"<p>After this course, you will be able to:</p> <ul> <li>distinguish advantages and pitfalls of scRNAseq</li> <li>design your own scRNA-seq experiment</li> <li>apply a downstream analysis using R</li> </ul>"},{"location":"#learning-outcomes-explained","title":"Learning outcomes explained","text":"<p>To reach the general learning outcomes above, we have set a number of smaller learning outcomes. Each chapter starts with these smaller learning outcomes. Use these at the start of a chapter to get an idea what you will learn. Use them also at the end of a chapter to evaluate whether you have learned what you were expected to learn.</p>"},{"location":"#learning-experiences","title":"Learning experiences","text":"<p>To reach the learning outcomes we will use lectures, exercises, polls and group work. During exercises, you are free to discuss with other participants. During lectures, focus on the lecture only.</p>"},{"location":"#exercises","title":"Exercises","text":"<p>Each block has practical work involved. Some more than others. The practicals are subdivided into chapters, and we\u2019ll have a (short) discussion after each chapter. All answers to the practicals are incorporated, but they are hidden. Do the exercise first by yourself, before checking out the answer. If your answer is different from the answer in the practicals, try to figure out why they are different.</p>"},{"location":"course_schedule/","title":"Course schedule","text":"<p>Note</p> <p>Apart from the starting time the time schedule is indicative. Because we can not plan a course by the minute, in practice the time points will deviate. </p>"},{"location":"course_schedule/#day-1","title":"Day 1","text":"block start end subject introduction 9:15 AM 9:30 AM Introduction block 1 9:30 AM 10:30 AM Introduction scRNAseq 10:30 AM 11:00 AM BREAK block 2 11:00 AM 12:30 PM Analysis tools and QC 12:30 PM 1:30 PM BREAK block 3 1:30 PM 3:00 PM Analysis tools and QC 3:00 PM 3:30 PM BREAK block 4 3:30 PM 5:00 PM Normalization and scaling"},{"location":"course_schedule/#day-2","title":"Day 2","text":"block start end subject block 1 9:15 AM 10:30 AM Integration and Dimensionality reduction 10:30 AM 11:00 AM BREAK block 2 11:00 AM 12:30 PM Further exercises 12:30 PM 1:30 PM BREAK block 3 1:30 PM 3:00 PM Cell annotation 3:00 PM 3:30 PM BREAK block 4 3:30 PM 5:00 PM Further exercises"},{"location":"course_schedule/#day-3","title":"Day 3","text":"block start end subject block 1 9:15 AM 10:30 AM Differential gene expression 10:30 AM 11:00 AM BREAK block 2 11:00 AM 12:30 PM Differential gene expression 12:30 PM 1:30 PM BREAK block 3 1:30 PM 3:00 PM Enrichment analysis 3:00 PM 3:30 PM BREAK block 4 3:30 PM 5:00 PM Advanced analyses"},{"location":"precourse/","title":"Precourse preparations","text":""},{"location":"precourse/#required-competences","title":"Required competences","text":"<p>Participants should already have a basic knowledge in Next Generation Sequencing (NGS) techniques, or have already followed the course NGS - Quality control, Alignment, Visualisation. Knowledge in RNA sequencing is a plus. A basic knowledge of the R statistical software is required. Test your R skills with the quiz here, before registering.</p>"},{"location":"precourse/#software","title":"Software","text":"<p>If working independently</p> <p>If you are not enrolled to the course (i.e. doing it in your own time), you can either choose to install the packages locally, or use docker. See setup for more details. </p> <p>Attendees should have a Wi-Fi enabled computer. An online R and RStudio environment will be provided. However, in case you wish to perform the practical exercises on your own computer, please take a moment to install the following before the course:</p> <ul> <li>R version &gt; 4.0. </li> <li>Latest RStudio version, the free version is perfectly fine.</li> <li>The R packages necessary for the course. Find the script to install them here. </li> </ul>"},{"location":"day1/analysis_tools_qc/","title":"Analysis tools and QC","text":""},{"location":"day1/analysis_tools_qc/#learning-outcomes","title":"Learning outcomes","text":"<p>After having completed this chapter you will be able to:</p> <ul> <li>Load single cell data into R</li> <li>Explain the basic structure of a <code>Seurat</code> object and extract count data and metadata</li> <li>Calculate and visualize quality measures based on:<ul> <li>mitochondrial genes</li> <li>ribosomal genes</li> <li>hemoglobin genes</li> <li>relative gene expression</li> </ul> </li> <li>Interpret the above quality measures per cell.</li> <li>Perform cell filtering based on quality thresholds</li> </ul>"},{"location":"day1/analysis_tools_qc/#material","title":"Material","text":"<p> Download the presentation</p>"},{"location":"day1/analysis_tools_qc/#exercises","title":"Exercises","text":""},{"location":"day1/analysis_tools_qc/#loading-scrnaseq-data","title":"Loading scRNAseq data","text":"<p>The next step after the generation of the count matrices with <code>cellranger count</code>, is the data analysis. The <code>R</code> package <code>Seurat</code> is currently the most popular software to do this. To start working with <code>Seurat</code> you can load it into your environment like this:</p> <p>re-install <code>Matrix</code> first</p> <p>The version of the dependency <code>Matrix</code> was not installed correctly. Run:</p> <pre><code>install.packages(\"Matrix\")\n</code></pre> <p>Before loading <code>Seurat</code></p> <pre><code>library(Seurat)\n</code></pre> <p>Tip: make an R script</p> <p>You could type and copy-paste the commands of these exercises directly in the console. However, that makes it hard to track what you have done. In addition, it can be nice to add comments to your code, so you can read back why you have made certain choices. In order to do that, do not write commands in the console, but write them in a script, and send them to the console with Ctrl+Enter (Windows) or Cmd+Enter (MacOS).</p> <p>First, we will load a file specifying the different samples, and create an object specifying the location of the count data:</p> <pre><code>sample_info &lt;- read.csv(\"course_data/sample_info_course.csv\")\ndatadirs &lt;- file.path(\"course_data\", \"count_matrices\", sample_info$SampleName,\n                      \"outs\", \"filtered_feature_bc_matrix\")\nnames(datadirs) &lt;- gsub(\"_\", \"-\", sample_info$SampleName)\ndatadirs &lt;- datadirs[1:3]\n</code></pre> <p>The object <code>datadirs</code> is a named vector specifying the paths of the count directories for each sample:</p> <pre><code>                                                                  PBMMC-1 \n     \"course_data/count_matrices/PBMMC_1/outs/filtered_feature_bc_matrix\" \n                                                                  PBMMC-2 \n     \"course_data/count_matrices/PBMMC_2/outs/filtered_feature_bc_matrix\" \n                                                                  PBMMC-3 \n     \"course_data/count_matrices/PBMMC_3/outs/filtered_feature_bc_matrix\" \n</code></pre> <p>To run through a typical <code>Seurat</code> analysis, we will use the files that are in the directory <code>data/filtered_feature_bc_matrix</code>. This directory is part of the output generated by <code>cellranger</code>. To load this data into R and generate a sparse matrix, run the following command:</p> <pre><code>sparse_matrix &lt;- Seurat::Read10X(data.dir = datadirs)\n</code></pre> <p>This imports a raw count matrix. Have a look at the counts of the first 30 cells of three genes by running:</p> <pre><code>sparse_matrix[c(\"PECAM1\", \"CD8A\", \"TSPAN1\"), 1:30]\n</code></pre> <p>You will see many dots (zeros) and a few integers representing the counts per gene per cell. </p> <p>To generate a <code>Seurat</code> object, we will run <code>CreateSeuratObject</code>. Note that while creating the object, we already do some mild filtering; we only import genes that are expressed in at least 3 cells, and we only import cells that have at least 100 different genes expressed:</p> <pre><code>seu &lt;- Seurat::CreateSeuratObject(counts = sparse_matrix,\n                                  project = \"pbmmc\",\n                                  min.cells = 3,\n                                  min.features = 100)\n</code></pre> <p>Function notation with <code>::</code></p> <p>Here, we define the function together with its associated package. We do that by the syntax <code>package::function</code>. Of course, you can also call <code>library(package)</code>, and only type the function name. Since we use many different packages in this course, it can be confusing which function comes from which package. Therefore, we chose to always associate the package with the called function.</p> <p>Exercise: check what\u2019s in the <code>seu</code> object, by typing <code>seu</code> in the R console. How many features are in there? And how many cells?</p> Answer <p>Typing <code>seu</code> should return:</p> <pre><code>An object of class Seurat \n18673 features across 6946 samples within 1 assay \nActive assay: RNA (18673 features, 0 variable features)\n</code></pre> <p>This means that we have 18673 genes (features) in there, and 6946 cells (samples)</p>"},{"location":"day1/analysis_tools_qc/#the-seurat-object","title":"The <code>Seurat</code> object","text":"<p>The <code>seu</code> object we have created has the class <code>Seurat</code>. The object contains multi-level slots and lists. Each <code>Seurat</code> object contains exactly the same slots that are specified in the image below (get slot descriptions by typing <code>?SeuratObject::Seurat</code>). You can get the information inside a slot with <code>@</code>, in the same way as you would use the <code>$</code> for lists (e.g. <code>seu@meta.data</code> will return the a data frame with information on each cell). Slots can be filled with other R objects, like lists, vectors, data frames or any other class. Here\u2019s an overview of all slots that are in a <code>Seurat</code> object:</p> <p>In addition to the original count table, the <code>Seurat</code> object can therefore store a lot of information that is generated during your analysis, like results of a normalization (<code>@assays$RNA@data</code>) a PCA or UMAP (<code>@reductions</code>) and the clustering (<code>@graphs</code>). It also tracks all the commands that have been used to generate the object in its current state (<code>@commands</code>). Therefore, while going through the analysis steps, the same object gets more and more of its slots filled. Because most <code>Seurat</code> functions return the input object + adjusted slots, we can use this syntax:</p> <pre><code>seurat_object &lt;- Seurat::function(seurat_object)\n</code></pre> <p>So, the function takes an object as input and we assign it to an object with the same name. Meaning that we overwrite the object used as input. This is fine in many cases, because <code>Seurat</code> adds information to the input object, and returns is. We will use this syntax for the first time at Normalization and scaling.</p> <p>Getting specific information out of the <code>Seurat</code> object</p> <pre><code>In order to get specific data you can use the `@` and `$` symbols to browse through the objects. However, `Seurat` comes with a lot of convenience functions, that are easier to use. So, e.g. to get the raw count matrix, you could type `seurat_object@assays$RNA@counts`, however, this is equivalent to `GetAssayData(object = seurat_object, slot = \"counts\")`. More information on these convenience functions [here](https://satijalab.org/seurat/articles/essential_commands.html).\n</code></pre> <p>Exercise:</p> <p>A. Have a look at the <code>seu</code> object by running <code>View(seu)</code>. What is in there? What is stored in <code>@active.ident</code>? </p> <p>B. Have a look at the <code>data.frame</code> stored at <code>seu@meta.data</code> what kind of information is in there?</p> Answer Answer AAnswer B <p>There are many slots as described in the above figure. The slot <code>@active.ident</code> contains data specifying the samples, e.g. <code>table(seu@active.ident)</code> returns:</p> <pre><code>PBMMC-1 PBMMC-2 PBMMC-3 \n1612    3105    2229 \n</code></pre> <p>Which are the number of cells per sample. </p> <p>Running <code>head(seu@meta.data)</code> returns:</p> <pre><code>                           orig.ident nCount_RNA nFeature_RNA\nPBMMC-1_AAACCTGCAGACGCAA-1    PBMMC-1       2401          909\nPBMMC-1_AAACCTGTCATCACCC-1    PBMMC-1       3532          760\nPBMMC-1_AAAGATGCATAAAGGT-1    PBMMC-1       3972         1215\nPBMMC-1_AAAGCAAAGCAGCGTA-1    PBMMC-1       3569          894\nPBMMC-1_AAAGCAACAATAACGA-1    PBMMC-1       2982          730\nPBMMC-1_AAAGCAACATCAGTCA-1    PBMMC-1      22284         3108\n</code></pre> <p>Giving you the names of three columns and a row for each cell:</p> <ul> <li><code>orig_ident</code>: the original identity (origin) of a cell.</li> <li><code>nCount_RNA</code>: the number of reads assigned to a cell.</li> <li><code>nFeature_RNA</code>: the number of expressed features (genes) per cell.</li> </ul> <p>Luckily, usually you do not have to dive into this structure to retrieve information. For example, information in the slot <code>@meta.data</code> can be retrieved and set by using <code>$</code> or <code>[[]]</code>.</p> <p>Note</p> <p>There is a subtle difference here between <code>$</code> and <code>[[]]</code>. While <code>$</code> returns a vector of the column in <code>@meta.data</code>, <code>[[]]</code> returns a <code>data.frame</code>.</p> <p>Exercise: Generate a histogram of the column <code>nCount_RNA</code> at <code>seu@meta.data</code>, with the base function <code>hist</code>.</p> Answer <pre><code>hist(seu$nCount_RNA)\n</code></pre> <p>or</p> <pre><code>hist(seu@meta.data$nCount_RNA)\n</code></pre> <p>There are also built-in functions to plot data from <code>Seurat</code> object, for example <code>FeatureScatter</code>. This function enables you easily draw a scatterplot from a <code>Seurat</code> object:</p> <pre><code>Seurat::FeatureScatter(seu, feature1 = \"nCount_RNA\", feature2 = \"nFeature_RNA\")\n</code></pre> <p>You can find a nice overview of such functions here. </p>"},{"location":"day1/analysis_tools_qc/#visualizing-qc-per-cell-and-gene","title":"Visualizing QC per cell and gene","text":"<p>While generating the <code>Seurat</code> object, there were already some quality measures calculated for each cell, namely the total UMI counts per cell (<code>nCount_RNA</code>) and the total number of detected features per cell (<code>nFeature_RNA</code>). We can plot those in a violin plot and evaluate their distribution per sample:</p> <pre><code>Seurat::VlnPlot(seu, features = c(\"nCount_RNA\",\n                                  \"nFeature_RNA\"))\n</code></pre> <p>You can see that there is quite a wide range for both. A cell with low number of detected features or counts might not give you a lot of information, while a high number of detected features/counts might point to doublets.</p> <p>Single cells have often undergone sampling and/or dissociation and/or sorting. Therefore, there are often cells and genes in your dataset that cause variation due to technical reasons. In the following steps, we will visualize those and make decisions on whether or not to remove cells or genes with extreme values.</p> <p>We will start with calculating the percentage of counts coming from transcript types:</p> <ul> <li>Mitochondrial genes: If a cell membrane is damaged, it looses free RNA quicker compared to mitochondrial RNA, because the latter is part of the mitochondrion. A high relative amount of mitochondrial counts can therefore point to damaged cells (Lun et al. 2016). </li> <li>Ribosomal genes: Are not rRNA (ribosomal RNA) but is mRNA that code for ribosomal proteins. They do not point to specific issues, but it can be good to have a look at their relative abundance. They can have biological relevance (e.g. Caron et al. 2020).</li> <li>Hemoglobin genes: these transcripts are very abundant in erythrocytes. Depending on your application, you can expect \u2018contamination\u2019 of erythrocytes and select against it. </li> </ul> <p>In order to have an idea about the relative counts of these type of genes in our dataset, we can calculate their expression as relative counts in each cell. We do that by selecting genes based on patterns (e.g. <code>^MT-</code> matches with all gene names starting with <code>MT</code>, i.e. mitochondrial genes):</p> <pre><code># mitochondrial genes\nseu &lt;- Seurat::PercentageFeatureSet(seu, \n                                    pattern = \"^MT-\", \n                                    col.name = \"percent.mito\")\n\n# ribosomal genes\nseu &lt;- Seurat::PercentageFeatureSet(seu, \n                                    pattern = \"^RP[SL]\",\n                                    col.name = \"percent.ribo\")\n\n# hemoglobin genes (but not HBP)\nseu &lt;- Seurat::PercentageFeatureSet(seu,\n                                    pattern = \"^HB[^(P)]\",\n                                    col.name = \"percent.globin\")\n</code></pre> <p>Exercise: Run the commands and check out the metadata data frame at <code>seu@meta.data</code>. What has changed?</p> Answer <p>If we type <code>head(seu@meta.data)</code> it returns:</p> <p><pre><code>                           orig.ident nCount_RNA nFeature_RNA percent.mito percent.ribo percent.globin\nPBMMC-1_AAACCTGCAGACGCAA-1    PBMMC-1       2401          909     2.540608     28.65473      0.1665973\nPBMMC-1_AAACCTGTCATCACCC-1    PBMMC-1       3532          760     5.181200     55.03964      0.1981880\nPBMMC-1_AAAGATGCATAAAGGT-1    PBMMC-1       3972         1215     4.934542     30.43807      0.3776435\nPBMMC-1_AAAGCAAAGCAGCGTA-1    PBMMC-1       3569          894     3.250210     55.02942      0.3642477\nPBMMC-1_AAAGCAACAATAACGA-1    PBMMC-1       2982          730     3.688799     54.49363      0.1006036\nPBMMC-1_AAAGCAACATCAGTCA-1    PBMMC-1      22284         3108     3.181655     23.40693     36.9682283\n</code></pre> So, the function <code>PercentageFeatureSet</code> adds a column to <code>meta.data</code>, specifying the percentage of counts for the specified gene sets. </p> <p>Now we can plot the distribution of these percentages in a violin plot:</p> <pre><code>Seurat::VlnPlot(seu, features = c(\"percent.mito\",\n                                  \"percent.ribo\",\n                                  \"percent.globin\"))\n</code></pre> <p>You can see that <code>PBMMC-2</code> is quite different from the two others, it has a group of cells with very low ribosomal counts and one with very high globin counts. Maybe these two percentages are negatively correlated? Let\u2019s have a look, by plotting the two percentages against each other:</p> <pre><code>Seurat::FeatureScatter(seu, \n                       feature1 = \"percent.globin\", \n                       feature2 = \"percent.ribo\")\n</code></pre> <p>Exercise: Are they correlated? What kind of cells might have a high abundance of hemoglobin transcripts and low ribosomal transcripts? </p> Answer <p>Yes there is a negative correlation:</p> <p> </p> <p>Erythrocytes (red blood cells) have a high abundance of hemoglobin transcripts and low abundance of ribosomal transcripts. These are most likely erythroid cells, i.e. the cells predecessing erythrocytes in the bone marrow. </p> <p>We can also evaluate the relative expression of other genes in our dataset, for example, the ones that are most highly expressed. Some very highly expressed genes might point to a technical cause, and we might consider to remove them. Below you will find a simple function to generate a boxplot of relative counts per gene per cell. Load it into your environment and run it on our <code>seu</code> object:</p> <pre><code>library(ggplot2)\nlibrary(Matrix)\nlibrary(Seurat)\n\nmost_expressed_boxplot &lt;- function(object, ngenes = 20){\n\n  # matrix of raw counts\n  cts &lt;- Seurat::GetAssayData(object, assay = \"RNA\", slot = \"counts\")\n\n  # get percentage/cell\n  cts &lt;- t(cts)/colSums(cts)*100\n  medians &lt;- apply(cts, 2, median)\n\n  # get top n genes\n  most_expressed &lt;- order(medians, decreasing = T)[ngenes:1]\n  most_exp_matrix &lt;- as.matrix((cts[,most_expressed]))\n\n  # prepare for plotting\n  most_exp_df &lt;- stack(as.data.frame(most_exp_matrix))\n  colnames(most_exp_df) &lt;- c(\"perc_total\", \"gene\")\n\n  # boxplot with ggplot2\n  boxplot &lt;- ggplot(most_exp_df, aes(x=gene, y=perc_total)) +\n    geom_boxplot() +\n    coord_flip()\n  return(boxplot)\n}\n\nmost_expressed_boxplot(seu, 20)\n</code></pre> <p>As for most 10X based poly-A enriched single cell datasets, we find a relatively high expression of MALAT1. Many researchers choose to remove it, but it can have biological relevance (e.g. Shaat et al. 2021). </p>"},{"location":"day1/analysis_tools_qc/#cell-filtering","title":"Cell filtering","text":"<p>Based on the QC process we went through we can come to the following conclusions:</p> <ul> <li>There are no cells with very high mitochondrial gene counts.</li> <li>There are some cells with a hemoglobin and low ribosomal counts, and these are probably erythrocytes.</li> <li>There are some cells with a very low and very high number of features. These might point to non-informative cells and doublets respectively. </li> <li>The \u2018usual suspect\u2019 MALAT1 sometimes makes up a large part of the counts per cell. As we do not see any other suggestions of dying/stressed cells, we leave it in. </li> </ul> <p>In this case, a sensible decision would be to do mild filtering on the number of features per cell and mitochondrial counts. We can leave the possible erythrocytes in for now, and see where they end up later during the dimensionality reduction. </p> <p>In the M&amp;M of the publication, the authors describe that they have used a threshold of &lt; 8% mitochondrial counts and &gt; 200 features per cell. To filter against possible doublets, here, we also filter out cells with &gt; 5000 detected features/cell. Filtering <code>Seurat</code> objects can be done with the <code>subset</code> method for class <code>SeuratObject</code>:</p> <pre><code>seu &lt;- subset(seu, subset = nFeature_RNA &gt; 200 &amp; \n                nFeature_RNA &lt; 5000 &amp;\n                percent.mito &lt; 8)\n</code></pre> <p>To evaluate this did the trick we can visualize those parameters again in a violin plot:</p> <pre><code>Seurat::VlnPlot(seu, features = c(\"nFeature_RNA\",\n                                  \"percent.mito\"))\n</code></pre>"},{"location":"day1/introduction_cellranger/","title":"Introduction & cellranger","text":""},{"location":"day1/introduction_cellranger/#learning-outcomes","title":"Learning outcomes","text":"<p>After having completed this chapter you will be able to:</p> <ul> <li>Explain what kind of information single cell RNA-seq can give you to answer a biological question</li> <li>Describe essential considerations during the design of a single cell RNA-seq experiment</li> <li>Describe the pros and cons of different single cell sequencing methods</li> <li>Use cellranger to:<ul> <li>To align reads and generate count tables</li> <li>Perform basic QC on alignments and counts</li> </ul> </li> </ul>"},{"location":"day1/introduction_cellranger/#material","title":"Material","text":"<p>Introduction to scRNA-seq and techniques: </p> <p> Download the presentation</p> <p>scRNA-seq with 10x genomics: </p> <p> Download the presentation</p> <ul> <li>Single cell introductory video on iBiology</li> <li>Seurat website</li> <li>Paper on experimental considerations</li> <li>Paper on experimental design</li> <li>SMART-seq3 protocol at protocols.io</li> <li><code>cellranger</code> system requirements and installation</li> <li>Review by Tallulah Andrews</li> <li>Paper on correlation between mRNA and protein level in single cells</li> </ul>"},{"location":"day1/introduction_cellranger/#running-cellranger-count","title":"Running <code>cellranger count</code>","text":"<p>If working independently</p> <p>The exercises below assume that you are enrolled in the course, and have access to the Rstudio server. These exercises are not essential to run for the rest of the course, so you can skip them. If you want to do them anyway, you can try to install <code>cellranger</code> locally (only on Linux or WSL). In addition, you will need to download the references. You can get it by with this code (choose your OS):</p> Linux/MacOS/WSLWindows <pre><code>wget https://single-cell-transcriptomics.s3.eu-central-1.amazonaws.com/cellranger_index.tar.gz\ntar -xvf cellranger_index.tar.gz\nrm cellranger_index.tar.gz\n</code></pre> <p>Download using the link, and unpack in your working directory. </p> <p>This will download and extract the index in the current directory. Specify the path to this reference in the exercises accordingly. </p> <p>Have a look in the directory <code>course_data/reads</code> and <code>/data/cellranger_index</code>. In the <code>reads</code> directory you will find reads on one sample: <code>ETV6-RUNX1_1</code>. In the analysis part of the course we will work with six samples, but due to time and computational limitations we will run <code>cellranger count</code> on one of the samples, and only reads originating from chromsome 21 and 22. </p> <p>The input you need to run <code>cellranger count</code> are the sequence reads and a reference. Here, we have prepared a reference only with chromosome 21 and 22, but in \u2018real life\u2019 you would of course get the full reference genome of your species. The reference has a specific format. You can download precomputed human and mouse references from the 10X website. If your species of interest is not one of those, you will have to generate it yourself. For that, have a look here.</p> <p>To be able to run cellranger in the compute environment, first run:</p> <pre><code>export PATH=/data/cellranger-7.1.0:$PATH\n</code></pre> <p>Have a look at the documentation of <code>cellranger count</code> (scroll down to Command-line argument reference).</p> <p>You can find the input files here:</p> <ul> <li>reads: <code>/home/rstudio/single_cell_course/course_data/reads/</code> (from the downloaded tar package in your home directory)</li> <li>pre-indexed reference: <code>/data/cellranger_index</code></li> </ul> <p>Fill out the missing arguments (at <code>FIXME</code>) in the script below, and run it:</p> <pre><code>cellranger count \\\n--id=FIXME \\\n--sample=FIXME \\\n--transcriptome=FIXME \\\n--fastqs=FIXME \\\n--localcores=4 \n</code></pre> <p>This will take a while..</p> <p>Once started, the process will need approximately 15 minutes to finish. Have a coffee and/or have a look at the other exercises. </p> <p>Running a bash command with Rstudio</p> <p>You can run a bash script or command using the terminal tab in Rstudio server:   </p> Answer <pre><code>cellranger count \\\n--id=ETV6-RUNX1_1 \\\n--sample=ETV6-RUNX1_1 \\\n--transcriptome=/data/cellranger_index \\\n--fastqs=/home/rstudio/single_cell_course/course_data/reads \\\n--localcores=4 \n</code></pre> <p>Have a look out the output directory (i.e. <code>~/ETV6-RUNX1_1/outs</code>). The analysis report (<code>web_summary.html</code>) is usually a good place to start. </p> <p>Open html files in Rstudio server</p> <p>You can use the file browser in the bottom right (tab \u201cFiles\u201d) to open html files:</p> <p> </p> <p>Exercise: Have a good look inside <code>web_summary.html</code>. Anything that draws your attention? Is this report good enough to continue the analysis? </p> Answer <p>Not really. First of all there is a warning: <code>Fraction of RNA read bases with Q-score &gt;= 30 is low</code>. This means that there is a low base quality of the reads. A low base quality gives results in more sequencing error and therefore possibly lower performance while mapping the reads to genes. However, a Q-score of 30 still represents 99.9% accuracy. </p> <p>What should worry us more is the number of reads per cell (363) and the sequencing saturation (7.9%). In most cases you should aim for 30.000 - 50.000 reads per cell (depending on the application). We therefore don\u2019t have enough reads per cell. However, as you might remember, this was a subset of reads (1 million) mapped against chromosome 21 &amp; 22, while the original dataset contains 210,987,037 reads. You can check out the original report at <code>course_data/count_matrices/ETV6-RUNX1_1/outs/web_summary.html</code>.</p> <p>For more info on sequencing saturation, have a look here. </p>"},{"location":"day1/normalization_scaling/","title":"Normalization and scaling","text":""},{"location":"day1/normalization_scaling/#learning-outcomes","title":"Learning outcomes","text":"<p>After having completed this chapter you will be able to:</p> <ul> <li>Describe and perform standard procedures for normalization and scaling with the package <code>Seurat</code></li> <li>Select the most variable genes from a <code>Seurat</code> object for downstream analyses</li> </ul>"},{"location":"day1/normalization_scaling/#material","title":"Material","text":"<ul> <li>Seurat vignette</li> </ul>"},{"location":"day1/normalization_scaling/#exercises","title":"Exercises","text":""},{"location":"day1/normalization_scaling/#normalization","title":"Normalization","text":"<p>After removing unwanted cells from the dataset, the next step is to normalize the data. By default, Seurat employs a global-scaling normalization method <code>\"LogNormalize\"</code> that normalizes the feature expression measurements for each cell by the total expression, multiplies this by a scale factor (10,000 by default), and log-transforms the result. Normalized values are stored in the \u201cRNA\u201d assay (as item of the <code>@assay</code> slot) of the seu object.</p> <p>Exercise: Have a look at the assay data before and after running <code>NormalizeData()</code>. Did it change?</p> <p>Hint</p> <p>You can extract assay data with the function <code>Seurat::GetAssayData</code>. By default, the slot <code>data</code> is used (inside the slot <code>assay</code>), containing normalized counts. Use <code>Seurat::GetAssayData(seu, slot = \"counts\")</code> to get the raw counts. </p> Answer <p>You can check out some assay data with:</p> <p><pre><code>Seurat::GetAssayData(seu)[1:10,1:10]  \n</code></pre> Returning:</p> Before normalizationAfter normalization <pre><code>10 x 10 sparse Matrix of class \"dgCMatrix\"\n[[ suppressing 10 column names \u2018PBMMC-1_AAACCTGCAGACGCAA-1\u2019, \u2018PBMMC-1_AAACCTGTCATCACCC-1\u2019, \u2018PBMMC-1_AAAGATGCATAAAGGT-1\u2019 ... ]]\n\nRP11-34P13.7  . . . . . . . . . .\nFO538757.3    . . . . . . . . . .\nFO538757.2    1 . . . . . 2 . . .\nAP006222.2    . . . . . . . . . .\nRP4-669L17.10 . . . . . . . . . .\nRP5-857K21.4  . . . . . . . . . .\nRP11-206L10.9 . . . . . . . . . .\nLINC00115     . . . . . . . . . .\nFAM41C        . . . . . . . . . .\nRP11-54O7.1   . . . . . . . . . .\n</code></pre> <pre><code>10 x 10 sparse Matrix of class \"dgCMatrix\"\n[[ suppressing 10 column names \u2018PBMMC-1_AAACCTGCAGACGCAA-1\u2019, \u2018PBMMC-1_AAACCTGTCATCACCC-1\u2019, \u2018PBMMC-1_AAAGATGCATAAAGGT-1\u2019 ... ]]\n\nRP11-34P13.7  .        . . . . . .        . . .\nFO538757.3    .        . . . . . .        . . .\nFO538757.2    1.641892 . . . . . 1.381104 . . .\nAP006222.2    .        . . . . . .        . . .\nRP4-669L17.10 .        . . . . . .        . . .\nRP5-857K21.4  .        . . . . . .        . . .\nRP11-206L10.9 .        . . . . . .        . . .\nLINC00115     .        . . . . . .        . . .\nFAM41C        .        . . . . . .        . . .\nRP11-54O7.1   .        . . . . . .        . . .\n</code></pre> <pre><code>seu &lt;- Seurat::NormalizeData(seu,\n                     normalization.method = \"LogNormalize\",\n                     scale.factor = 10000)\n</code></pre> <p>Updating <code>seu</code></p> <p>As you might have noticed, this function takes the object <code>seu</code> as input, and it returns it to an object named <code>seu</code>. We can do this because the output of such calculations are added to the object, without loosing information.</p>"},{"location":"day1/normalization_scaling/#variable-features","title":"Variable features","text":"<p>We next calculate a subset of features that exhibit high cell-to-cell variation in the dataset (i.e, they are highly expressed in some cells, and lowly expressed in others). Focusing on these genes in downstream analysis helps to highlight biological signal in single-cell datasets. The procedure in Seurat models the mean-variance relationship inherent in single-cell data, and is implemented in the <code>FindVariableFeatures()</code> function. By default, 2,000 genes (features) per dataset are returned and these will be used in downstream analysis, like PCA.</p> <pre><code>seu &lt;- Seurat::FindVariableFeatures(seu,\n                            selection.method = \"vst\",\n                            nfeatures = 2000)\n</code></pre> <p>Let\u2019s have a look at the 10 most variable genes:</p> <pre><code># Identify the 10 most highly variable genes\ntop10 &lt;- head(Seurat::VariableFeatures(seu), 10)\ntop10\n</code></pre> <p>We can plot them in a nicely labeled scatterplot:</p> <pre><code>vf_plot &lt;- Seurat::VariableFeaturePlot(seu)\nSeurat::LabelPoints(plot = vf_plot,\n            points = top10, repel = TRUE)\n</code></pre> <p>Make sure the plotting window is large enough</p> <p>The function <code>LabelPoints</code> will throw an error if the plotting window is to small. If you get an error, increase plotting window size in RStudio and try again. </p> <p>You can see that most of the highly variables are antibody subunits (starting with IGH, IGL). Not very surprising since we look at bone marrow tissue. We can have a look later in which cells they are expressed. </p>"},{"location":"day1/normalization_scaling/#scaling","title":"Scaling","text":"<p>Next, we apply scaling, a linear transformation that is a standard pre-processing step prior to dimensional reduction techniques like PCA. The <code>ScaleData()</code> function</p> <ol> <li>shifts the expression of each gene, so that the mean expression across cells is 0</li> <li>scales the expression of each gene, so that the variance across cells is 1</li> </ol> <p>This step gives equal weight in downstream analyses, so that highly-expressed genes do not dominate. The results of this are stored in <code>seu$RNA@scale.data</code></p> <pre><code>seu &lt;- Seurat::ScaleData(seu,\n                 features = rownames(seu))\n</code></pre> <p>The use of <code>Seurat::SCTransform</code></p> <p>The functions <code>NormalizeData</code>, <code>VariableFeatures</code> and <code>ScaleData</code> can be replaced by the function <code>SCTransform</code>. The latter uses a more sophisticated way to perform the normalization and scaling, and is argued to perform better. However, it is slower, and a bit less transparent compared to using the three separate functions. Therefore, we chose not to use <code>SCTransform</code> for the exercises.</p> <p>Bonus exercise: Run <code>SCTransform</code> on the <code>seu</code> object. Where is the output stored?</p> Answer <p>You can run it like so:</p> <pre><code>seu &lt;- Seurat::SCTransform(seu)\n</code></pre> <p>And it will add an extra assay to the object. <code>names(seu@assays)</code> returns:</p> <pre><code>[1] \"RNA\" \"SCT\"\n</code></pre> <p>Meaning that a whole new assay was added (including the sparse matrices with counts, normalized data and scaled data). </p> <p>Warning</p> <p>Running <code>SCTransform</code> will change <code>@active.assay</code> into <code>SCT</code>(in stead of <code>RNA</code>; check it with <code>DefaultAssay(seu)</code>). This assay is used as a default for following function calls. To change the active assay to <code>RNA</code> run:</p> <pre><code>DefaultAssay(seu) &lt;- \"RNA\"\n</code></pre>"},{"location":"day1/normalization_scaling/#save-the-dataset-and-clear-environment","title":"Save the dataset and clear environment","text":"<p>Now, save the dataset so you can use it tomorrow:</p> <pre><code>saveRDS(seu, \"seu_day1.rds\")\n</code></pre> <p>Clear your environment:</p> <pre><code>rm(list = ls())\ngc()\n.rs.restartR()\n</code></pre>"},{"location":"day1/setup/","title":"Setup","text":""},{"location":"day1/setup/#material","title":"Material","text":"<p> Download the presentation</p>"},{"location":"day1/setup/#exercises","title":"Exercises","text":""},{"location":"day1/setup/#login-and-set-up","title":"Login and set up","text":"<p>Choose one of the following:</p> <ul> <li>Enrolled: if you are enrolled in a course with a teacher</li> <li>Own installation: if you want to install packages on your own local Rstudio installation</li> <li>Docker: if you want to use the docker image locally</li> <li>renkulab.io if you want to easily  deploy the environment outside the course</li> </ul> EnrolledOwn installationDockerrenkulab.io <p>Log in to Rstudio server with the provided link, username and password.</p> <p>Install the required packages using the script <code>install_packages.R</code></p> <p>With docker, you can use exactly the same environment as we use in the enrolled course, but than running locally.</p> <p>In the video below there\u2019s a short tutorial on how to set up a docker container for this course. Note that you will need administrator rights, and that if you are using Windows, you need the latest version of Windows 10.</p> <p></p> <p>The command to run the environment required for this course looks like this (in a terminal):</p> <p>Modify the script</p> <p>The home directory within the container is mounted to your current directory (<code>$PWD</code>), if you want to change this behaviour, modify the path after <code>-v</code> to the working directory on your computer before running it.</p> <pre><code>docker run \\\n--rm \\\n-p 8787:8787 \\\n-e PASSWORD=test \\\n-v $PWD:/home/rstudio \\\ngeertvangeest/single-cell-rstudio:latest\n</code></pre> <p>If this command has run successfully, approach Rstudio server like this:</p> <pre><code>http://localhost:8787\n</code></pre> <p>Copy this URL into your browser. If you used the snippet above, the credentials will be:</p> <ul> <li>Username: <code>rstudio</code></li> <li>Password: <code>test</code></li> </ul> <p>Great! Now you will be able to use Rstudio with all required installations.</p> <p>About the options</p> <p>The option <code>-v</code> mounts a local directory in your computer to the directory <code>/home/rstudio</code> in the docker container (\u2018rstudio\u2019 is the default user for Rstudio containers). In that way, you have files available both in the container and on your computer. Use this directory on your computer. Change the first path to a path on your computer that you want to use as a working directory.</p> <p>The part <code>geertvangeest/single-cell-rstudio:latest</code> is the image we are going to load into the container. The image contains all the information about software and dependencies needed for this course. When you run this command for the first time it will download the image. Once it\u2019s on your computer, it will start immediately.</p> <p>To simply run the environment, you can use renku. You can find the repository (including the image) here: https://renkulab.io/projects/geert.vangeest/single-cell-training/. </p>"},{"location":"day1/setup/#create-a-project","title":"Create a project","text":"<p>Now that you have access to an environment with the required installations, we will set up a project in a new directory. On the top right choose the button Project (None) and select New Project\u2026</p> <p>Continue by choosing New Directory</p> <p>As project type select New Project</p> <p>Finally, type in the project name. This should be <code>single_cell_course</code>. Finish by clicking Create Project.</p> <p>Now that we have setup a project and a project directory (it is in <code>/home/rstudio/single_cell_course</code>), we can download the data that is required for this course. We will use the built-in terminal of Rstudio. To do this, select the Terminal tab:</p>"},{"location":"day1/setup/#downloading-the-course-data","title":"Downloading the course data","text":"<p>To download and extract the dataset, copy-paste these commands inside the terminal tab:</p> <pre><code>wget https://single-cell-transcriptomics.s3.eu-central-1.amazonaws.com/course_data.tar.gz\ntar -xvf course_data.tar.gz\nrm course_data.tar.gz\n</code></pre> <p>If on Windows</p> <p>If you\u2019re using Windows, you can directly open the link in your browser, and downloading will start automatically. Unpack the tar.gz file in the directory where you want to work in during the course.</p> <p>Have a look at the data directory you have downloaded. It should contain the following:</p> <pre><code>course_data\n\u251c\u2500\u2500 count_matrices\n\u2502   \u251c\u2500\u2500 ETV6-RUNX1_1\n\u2502   \u2502   \u2514\u2500\u2500 outs\n\u2502   \u2502       \u2514\u2500\u2500 filtered_feature_bc_matrix\n\u2502   \u2502           \u251c\u2500\u2500 barcodes.tsv.gz\n\u2502   \u2502           \u251c\u2500\u2500 features.tsv.gz\n\u2502   \u2502           \u2514\u2500\u2500 matrix.mtx.gz\n\u2502   \u251c\u2500\u2500 ETV6-RUNX1_2\n\u2502   \u2502   \u2514\u2500\u2500 outs\n\u2502   \u2502       \u2514\u2500\u2500 filtered_feature_bc_matrix\n\u2502   \u2502           \u251c\u2500\u2500 barcodes.tsv.gz\n\u2502   \u2502           \u251c\u2500\u2500 features.tsv.gz\n\u2502   \u2502           \u2514\u2500\u2500 matrix.mtx.gz\n\u2502   \u251c\u2500\u2500 ETV6-RUNX1_3\n\u2502   \u2502   \u2514\u2500\u2500 outs\n\u2502   \u2502       \u2514\u2500\u2500 filtered_feature_bc_matrix\n\u2502   \u2502           \u251c\u2500\u2500 barcodes.tsv.gz\n\u2502   \u2502           \u251c\u2500\u2500 features.tsv.gz\n\u2502   \u2502           \u2514\u2500\u2500 matrix.mtx.gz\n\u2502   \u251c\u2500\u2500 PBMMC_1\n\u2502   \u2502   \u2514\u2500\u2500 outs\n\u2502   \u2502       \u2514\u2500\u2500 filtered_feature_bc_matrix\n\u2502   \u2502           \u251c\u2500\u2500 barcodes.tsv.gz\n\u2502   \u2502           \u251c\u2500\u2500 features.tsv.gz\n\u2502   \u2502           \u2514\u2500\u2500 matrix.mtx.gz\n\u2502   \u251c\u2500\u2500 PBMMC_2\n\u2502   \u2502   \u2514\u2500\u2500 outs\n\u2502   \u2502       \u2514\u2500\u2500 filtered_feature_bc_matrix\n\u2502   \u2502           \u251c\u2500\u2500 barcodes.tsv.gz\n\u2502   \u2502           \u251c\u2500\u2500 features.tsv.gz\n\u2502   \u2502           \u2514\u2500\u2500 matrix.mtx.gz\n\u2502   \u2514\u2500\u2500 PBMMC_3\n\u2502       \u2514\u2500\u2500 outs\n\u2502           \u2514\u2500\u2500 filtered_feature_bc_matrix\n\u2502               \u251c\u2500\u2500 barcodes.tsv.gz\n\u2502               \u251c\u2500\u2500 features.tsv.gz\n\u2502               \u2514\u2500\u2500 matrix.mtx.gz\n\u2514\u2500\u2500 reads\n    \u251c\u2500\u2500 ETV6-RUNX1_1_S1_L001_I1_001.fastq.gz\n    \u251c\u2500\u2500 ETV6-RUNX1_1_S1_L001_R1_001.fastq.gz\n    \u2514\u2500\u2500 ETV6-RUNX1_1_S1_L001_R2_001.fastq.gz\n\n20 directories, 21 files\n</code></pre> <p>This data comes from:</p> <p>Caron M, St-Onge P, Sontag T, Wang YC, Richer C, Ragoussis I, et al. Single-cell analysis of childhood leukemia reveals a link between developmental states and ribosomal protein expression as a source of intra-individual heterogeneity. Scientific Reports. 2020;10:1\u201312. Available from: http://dx.doi.org/10.1038/s41598-020-64929-x</p> <p>We will use the reads to showcase the use of <code>cellranger count</code>. The directory contains only reads from chromosome 21 and 22 of one sample (<code>ETV6-RUNX1_1</code>). The count matrices are output of <code>cellranger count</code>, and we will use those for the other exercises in <code>R</code>.</p>"},{"location":"day2/cell_annotation/","title":"Cell annotation","text":""},{"location":"day2/cell_annotation/#material","title":"Material","text":"<p> Download the presentation</p> <ul> <li>Review on automated cell annotation</li> </ul>"},{"location":"day2/cell_annotation/#exercises","title":"Exercises","text":"<p>Load the following packages:</p> <pre><code>library(celldex)\nlibrary(SingleR)\n</code></pre> <p>In the last exercise we saw that probably clustering at a resolution of 0.3 gave the most sensible results. Let\u2019s therefore set the default identity of each cell based on this clustering:</p> <pre><code>seu_int &lt;- Seurat::SetIdent(seu_int, value = seu_int$integrated_snn_res.0.3)\n</code></pre> <p>Note</p> <p>From now on, grouping (e.g. for plotting) is done by the active identity (set at <code>@active.ident</code>) by default.</p> <p>During cell annotation we will use the original count data (not the integrated data):</p> <pre><code>DefaultAssay(seu_int) &lt;- \"RNA\"\n</code></pre> <p>Based on the UMAP we have generated, we can visualize expression for a gene in each cluster:</p> <pre><code>Seurat::FeaturePlot(seu_int, \"HBA1\")\n</code></pre> <p>Based on expression of sets of genes you can do a manual cell type annotation. If you know the marker genes for some cell types, you can check whether they are up-regulated in one or the other cluster. Here we have some marker genes for two different cell types:</p> <pre><code>tcell_genes &lt;- c(\"IL7R\", \"LTB\", \"TRAC\", \"CD3D\")\nmonocyte_genes &lt;- c(\"CD14\", \"CST3\", \"CD68\", \"CTSS\")\n</code></pre> <p>Let\u2019s have a look at the expression of the four T cell genes:</p> <pre><code>Seurat::FeaturePlot(seu_int, tcell_genes, ncol=2)\n</code></pre> <p>These cells are almost all in cluster 0 and 8. Which becomes clearer when looking at the violin plot:</p> <pre><code>Seurat::VlnPlot(seu_int,\n                features = tcell_genes,\n                ncol = 2)\n</code></pre> <p>Exercise: Have a look at the monocyte genes as well. Which clusters contain probably monocytes?</p> Answer <p>Running</p> <pre><code>Seurat::FeaturePlot(seu_int, monocyte_genes, ncol=2)\n</code></pre> <p>Returns:</p> <p> </p> <p>Corresponding mainly to cluster 2 and 9:</p> <pre><code>Seurat::VlnPlot(seu_int,\n                features = monocyte_genes,\n                ncol = 2)\n</code></pre> <p> </p> <p>We can also automate this with the function <code>AddModuleScore</code>. For each cell, an expression score for a group of genes is calcuated:</p> <pre><code>seu_int &lt;- Seurat::AddModuleScore(seu_int,\n                              features = list(tcell_genes),\n                              name = \"tcell_genes\")\n</code></pre> <p>Exercise: After running <code>AddModuleScore</code>, a column was added to <code>seu_int@meta.data</code>.</p> <p>A. What is the name of that column? What kind of data is in there?</p> <p>B. Generate a UMAP with color accoding to this column and a violinplot grouped by cluster. Is this according to what we saw in the previous exercise?</p> Answer <p>A. The new column is called <code>tcell_genes1</code>. It contains the module score for each cell (which is basically the average expression of the set of genes).</p> <p>B. You can plot the UMAP with</p> <pre><code>Seurat::FeaturePlot(seu_int, \"tcell_genes1\")\n</code></pre> <p>Returning:</p> <p> </p> <pre><code>Seurat::VlnPlot(seu_int,\n                \"tcell_genes1\")\n</code></pre> <p>Which indeed shows these genes are mainly expressed in clusters 0 and 8:</p> <p> </p>"},{"location":"day2/cell_annotation/#annotating-cells-according-to-cycling-phase","title":"Annotating cells according to cycling phase","text":"<p>Based on the same principle, we can also annotate cell cycling state. The function <code>CellCycleScore</code> uses <code>AddModuleScore</code> to get a score for the G2/M and S phase (the mitotic phases in which cell is cycling). In addition, <code>CellCycleScore</code> assigns each cell to either the G2/M, S or G1 phase. </p> <p>First  we extract the built-in genes for cell cycling:</p> <pre><code>s.genes &lt;- Seurat::cc.genes.updated.2019$s.genes\ng2m.genes &lt;- Seurat::cc.genes.updated.2019$g2m.genes\n</code></pre> <p>Now we run the function:</p> <pre><code>seu_int &lt;- Seurat::CellCycleScoring(seu_int,\n                                     s.features = s.genes,\n                                     g2m.features = g2m.genes)\n</code></pre> <p>And we can visualize the annotations:</p> <pre><code>Seurat::DimPlot(seu_int, group.by = \"Phase\")\n</code></pre> <p>Based on your application, you can try to regress out the cell cycling scores at the step of scaling. Reasons for doing that could be:</p> <ul> <li>Merging cycling and non-cycling cells of the same type in one cluster</li> <li>Merging G2/M and S phase in one cluster</li> </ul> <p>Note</p> <p>Note that correcting for cell cycling is performed at the scaling step. It will therefore only influence analyses that use scaled data, like dimensionality reduction and clustering. For e.g. differential gene expression testing, we use the raw original counts (not scaled). </p> <p>Here, we choose not to regress out either of them. Because we are looking at developing cells, we might be interested to keep cycling cells seperated. In addition, the G2/M and S phases seem to be in the same clusters. More info on correcting for cell cycling here. </p>"},{"location":"day2/cell_annotation/#cell-type-annotation-using-singler","title":"Cell type annotation using <code>SingleR</code>","text":"<p>To do a fully automated annoation, we need a reference dataset of primary cells. Any reference could be used. The package <code>scRNAseq</code> in Bioconductor includes several scRNAseq datasets that can be used as reference to <code>SingleR</code>. One could also use a reference made of bulk RNA seq data. Here we are using the a hematopoietic reference dataset from <code>celldex</code>. Check out what\u2019s in there:</p> <pre><code>ref &lt;- celldex::NovershternHematopoieticData()\nclass(ref)\ntable(ref$label.main)\n</code></pre> <p>Note</p> <p>You will be asked whether to create the directory <code>/home/rstudio/.cache/R/ExperimentHub</code>. Type <code>yes</code> as a response. </p> <p>Note</p> <p>You can find more information on different reference datasets at the <code>celldex</code> documentation</p> <p>Now <code>SingleR</code> compares our normalized count data to a reference set, and finds the most probable annation:</p> <pre><code>seu_int_SingleR &lt;- SingleR::SingleR(test = Seurat::GetAssayData(seu_int, slot = \"data\"),\n                                ref = ref,\n                                labels = ref$label.main)\n</code></pre> <p>See what\u2019s in there by using <code>head</code>:</p> <pre><code>head(seu_int_SingleR)\n</code></pre> <p>Visualize singleR score quality scores:</p> <pre><code>SingleR::plotScoreHeatmap(seu_int_SingleR)\n</code></pre> <pre><code>SingleR::plotDeltaDistribution(seu_int_SingleR)\n</code></pre> <p>There are some annotations that contain only a few cells. They are usually not of interest, and they clogg our plots. Therefore we remove them from the annotation:</p> <pre><code>singleR_labels &lt;- seu_int_SingleR$labels\nt &lt;- table(singleR_labels)\nother &lt;- names(t)[t &lt; 10]\nsingleR_labels[singleR_labels %in% other] &lt;- \"none\"\n</code></pre> <p>In order to visualize it in our UMAP, we have to add the annotation to <code>seu_int@meta.data</code>:</p> <pre><code>seu_int$SingleR_annot &lt;- singleR_labels\n</code></pre> <p>We can plot the annotations in the UMAP. Here, we use a different package for plotting (<code>dittoSeq</code>) as it has a bit better default coloring, and some other plotting functionality we will use later on.</p> <pre><code>dittoSeq::dittoDimPlot(seu_int, \"SingleR_annot\", size = 0.7)\n</code></pre> <p>We can check out how many cells per sample we have for each annotated cell type:</p> <pre><code>dittoSeq::dittoBarPlot(seu_int, var = \"SingleR_annot\", group.by = \"orig.ident\")\n</code></pre> <p>Exercise: Compare our manual annotation (based on the set of T cell genes) to the annotation with <code>SingleR</code>. Do they correspond?</p> <p>Hint</p> <p>You can for example use the plotting function <code>dittoBarPlot</code> to visualize the cell types according to cluster (use <code>integrated_snn_res.0.3</code> in stead of <code>orig.ident</code>))</p> Answer <p>We can have a look at the mean module score for each <code>SingleR</code> annotation like this:</p> <pre><code>dittoSeq::dittoBarPlot(seu_int, \n                   var = \"SingleR_annot\", \n                   group.by = \"integrated_snn_res.0.3\")\n</code></pre> <p>This returns:</p> <p> </p> <p>Here, you can see that cluster 0 and 8 contain cells annotated as T cells (CD4+ and CD8+).</p>"},{"location":"day2/cell_annotation/#save-the-dataset-and-clear-environment","title":"Save the dataset and clear environment","text":"<p>Now, save the dataset so you can use it tomorrow:</p> <pre><code>saveRDS(seu_int, \"seu_int_day2_part2.rds\")\n</code></pre> <p>Clear your environment:</p> <pre><code>rm(list = ls())\ngc()\n.rs.restartR()\n</code></pre>"},{"location":"day2/clustering/","title":"Clustering","text":""},{"location":"day2/clustering/#material","title":"Material","text":"<p> Download the presentation</p> <ul> <li>Evaluation of clustering methods</li> </ul>"},{"location":"day2/clustering/#exercises","title":"Exercises","text":"<p>Load the <code>seu_int</code> dataset you have created earlier today:</p> <pre><code>seu_int &lt;- readRDS(\"seu_int_day2_part1.rds\")\n</code></pre> <p>The method implemented in Seurat first constructs a SNN graph based on the euclidean distance in PCA space, and refine the edge weights between any two cells based on the shared overlap in their local neighborhoods (Jaccard similarity). This step is performed using the <code>FindNeighbors()</code> function, and takes as input the previously defined dimensionality of the dataset.</p> <p>Note</p> <p>We use the integrated object (<code>seu_int</code>) and the assay <code>integrated</code>. Unsure? Check <code>DefaultAssay(seu_int)</code>, and set it by <code>DefaultAssay(seu_int) &lt;- \"integrated\"</code>. </p> <pre><code>seu_int &lt;- Seurat::FindNeighbors(seu_int, dims = 1:25)\n</code></pre> <p>To cluster the cells, Seurat next implements modularity optimization techniques such as the Louvain algorithm (default) or SLM [SLM, Blondel et al., Journal of Statistical Mechanics], to iteratively group cells together, with the goal of optimizing the standard modularity function. The <code>FindClusters()</code> function implements this procedure, and contains a resolution parameter that sets the \u2018granularity\u2019 of the downstream clustering, with increased values leading to a greater number of clusters.</p> <pre><code>seu_int &lt;- Seurat::FindClusters(seu_int, resolution = seq(0.1, 0.8, by=0.1))\n</code></pre> <p>Cluster id of each cell is added to the metadata object, as a new column for each resolution tested:</p> <pre><code>head(seu_int@meta.data)\n</code></pre> <p>To view how clusters sub-divide at increasing resolution:</p> <pre><code>library(clustree)\nclustree::clustree(seu_int@meta.data[,grep(\"integrated_snn_res\", colnames(seu_int@meta.data))],\n                   prefix = \"integrated_snn_res.\")\n</code></pre> <p>You can view the UMAP coloring each cell according to a cluster id like this:</p> <pre><code>Seurat::DimPlot(seu_int, group.by = \"integrated_snn_res.0.1\")\n</code></pre> <p>Exercise: Visualise clustering based on a few more resolutions. Taking the clustering and the UMAP plots into account what do you consider as a good resolution to perform the clustering?</p> Answer <p>Of course, there is no \u2018optimal\u2019 resolution, but based on resolution of 0.3, the tree stays relatively stable for a few resolution steps, and it seems that clustering fits the UMAP well:</p> <pre><code>Seurat::DimPlot(seu_int, group.by = \"integrated_snn_res.0.3\")\n</code></pre> <p> </p> <p>Exercise: When do the number of neighbors need to be changed? How does changing the method of clustering in <code>FindClusters</code> affect the output? Which parameter should be changed?</p> Answer <p>As FindClusters is an unsupervised clustering method on the PCA data and UMAP is a good summary of the PCA dimension selected, clusters and UMAP plot should go along. If one has reasons to change the number of neighbors in the UMAP function, here the same parameter should be adapted.</p> <p>The method can be changed with algorithm = 2,3 or 4</p>"},{"location":"day2/dimensionality_reduction/","title":"Dimensionality reduction","text":""},{"location":"day2/dimensionality_reduction/#material","title":"Material","text":"<p> Download the presentation</p> <ul> <li>Making sense of PCA</li> <li>Understanding t-SNE</li> <li>t-SNE explained by Josh Starmer</li> <li>Understanding UMAP</li> <li>Video by one of the UMAP authors</li> <li>More info on UMAP parameters</li> </ul>"},{"location":"day2/dimensionality_reduction/#exercises","title":"Exercises","text":"<p> This chapter uses the <code>seu</code> dataset</p> <p>Load the <code>seu</code> dataset you have created yesterday:</p> <pre><code>seu &lt;- readRDS(\"seu_day1.rds\")\n</code></pre> <p>And load the following packages:</p> <pre><code>library(Seurat)\n</code></pre> <p>Once the data is normalized, scaled and variable features have been identified, we can start to reduce the dimensionality of the data. For the PCA, by default, only the previously determined variable features are used as input, but can be defined using features argument if you wish to specify a vector of genes. The PCA will only be run on the variable features, that you can check with <code>VariableFeatures(seu)</code>.</p> <pre><code>seu &lt;- Seurat::RunPCA(seu)\n</code></pre> <p>To view the PCA plot:</p> <pre><code>Seurat::DimPlot(seu, reduction = \"pca\")\n</code></pre> <p>We can colour the PCA plot according to any factor that is present in <code>@meta.data</code>, or for any gene. For example we can take the column <code>percent.globin</code>:</p> <pre><code>Seurat::FeaturePlot(seu, reduction = \"pca\", features = \"percent.globin\")\n</code></pre> <p>Note</p> <p>Note that we used a different plotting function here: <code>FeaturePlot</code>. The difference between <code>DimPlot</code> and <code>FeaturePlot</code> is that the first allows you to color the points in the plot according to a grouping variable (e.g. sample) while the latter allows you to color the points according to a continuous variable (e.g. gene expression).</p> <p>Exercise: Generate a PCA plot where color is according to counts of a gene (i.e. gene expression). For example, you can take <code>HBA1</code> (alpha subunit of hemoglobin), or one of the most variable genes (e.g. <code>IGKC</code>).</p> Answer <p>Generating a PCA plot coloured according to gene expression (here <code>HBA1</code>):</p> <p><pre><code>Seurat::FeaturePlot(seu, reduction = \"pca\", features = \"HBA1\")\n</code></pre> </p> <p>We can generate heatmaps according to their principal component scores calculated in the rotation matrix:</p> <pre><code>Seurat::DimHeatmap(seu, dims = 1:12, cells = 500, balanced = TRUE)\n</code></pre> <p>The elbowplot can help you in determining how many PCs to use for downstream analysis such as UMAP:</p> <pre><code>Seurat::ElbowPlot(seu, ndims = 40)\n</code></pre> <p>The elbow plot ranks principle components based on the percentage of variance explained by each one. Where we observe an \u201celbow\u201d or flattening curve, the majority of true signal is captured by this number of PCs, eg around 25 PCs for the seu dataset.</p> <p>Including too many PCs usually does not affect much the result, while including too few PCs can affect the results very much.</p> <p>UMAP: The goal of these algorithms is to learn the underlying manifold of the data in order to place similar cells together in low-dimensional space.</p> <pre><code>seu &lt;- Seurat::RunUMAP(seu, dims = 1:25)\n</code></pre> <p>To view the UMAP plot:</p> <pre><code>Seurat::DimPlot(seu, reduction = \"umap\")\n</code></pre> <p>Exercise: Try to change:</p> <p>A. Color the dots in the UMAP according to a variable (e.g. <code>percent.globin</code> or <code>HBA1</code>). Any idea where the erythrocytes probably are in the UMAP?</p> <p>B. The number of neighbors used for the calculation of the UMAP. Which is the parameter to change and how did it affect the output. What is the default ? In which situation would you lower/increase this ?</p> <p>C. The number of dims to extremes dims = 1:5 or dims = 1:50 how did it affect the output ? In your opinion better few PCAs too much or too few ? Why does dims = 1:100 not work? When would more precision be needed?</p> Answer <p>Answer A </p> <pre><code>Seurat::FeaturePlot(seu, features = c(\"HBA1\", \"percent.globin\", \"IGKC\", \"percent.mito\"))\n</code></pre> <p>The erythrocytes are probably in the cluster with a higher percentage of globin expression.</p> <p> </p> <p>Answer B</p> <pre><code>seu &lt;- Seurat::RunUMAP(seu, dims = 1:25, n.neighbors = 5)\nSeurat::DimPlot(seu, reduction = \"umap\")\n</code></pre> <p> </p> <p>The default number of neighbours is 30. It can be of interest to change the number of neighbors if one has subset the data (for instance in the situation where you would only consider the t-cells inyour data set), then maybe the number of neighbors in a cluster would anyway be most of the time lower than 30 then 30 is too much. In the other extreme where your dataset is extremely big an increase in the number of neighbors can be considered.</p> <p>Answer C </p> <pre><code>seu &lt;- Seurat::RunUMAP(seu, dims = 1:5)\nSeurat::DimPlot(seu, reduction = \"umap\")\n</code></pre> <p> </p> <p><pre><code>seu &lt;- Seurat::RunUMAP(seu, dims = 1:50) \nSeurat::DimPlot(seu, reduction = \"umap\")\n</code></pre> </p> <p>Taking dims = 1:100 does not work as in the step RunPCA by default only 50pcs are calculated, so the maximum that we can consider in further steps are 50, if more precision makes sense, for instance, if the genes that is of interest for your study is not present when the RunPCA was calculated, then an increase in the number of components calculated at start might be interesting tobe considered. Taking too few PCs we have a \u00ab blob \u00bb everything looks connected. Too many PCs tends to separate everything. Personally it is more interesting for me too have maybe 2 clusters separated of epithelial cells that I then group for further downstream analysis rather than having very distinct cells being clustered together. So I would rather take the \u00ab elbow \u00bb of the elbow plot a bit further to the right.</p> <p>Warning</p> <p>After having done these exercises, change the UMAP back to a UMAP based on the first 25 PCs, in order to replicate the exercises in the following chapters. Do this by:</p> <pre><code>seu &lt;- Seurat::RunUMAP(seu, dims = 1:25)\n</code></pre>"},{"location":"day2/integration/","title":"Integration","text":""},{"location":"day2/integration/#exercises","title":"Exercises","text":"<p>Let\u2019s have a look at the UMAP again. Although cells of different samples are shared amongst \u2018clusters\u2019, you can still see seperation within the clusters:</p> <pre><code>Seurat::DimPlot(seu, reduction = \"umap\")\n</code></pre> <p>To perform the integration, we split our object by sample, resulting into a list with each sample as an element. We perform standard preprocessing (log-normalization), and identify variable features individually for each dataset based on a variance stabilizing transformation (<code>\"vst\"</code>).</p> <pre><code>seu_list &lt;- Seurat::SplitObject(seu, split.by = \"orig.ident\")\n\nfor (i in 1:length(seu_list)) {\n    seu_list[[i]] &lt;- Seurat::NormalizeData(seu_list[[i]])\n    seu_list[[i]] &lt;- Seurat::FindVariableFeatures(seu_list[[i]], selection.method = \"vst\", nfeatures = 2000,\n        verbose = FALSE)\n}\n</code></pre> <p>After this, we prepare the integration by selecting integration anchors:</p> <pre><code>seu_anchors &lt;- Seurat::FindIntegrationAnchors(object.list = seu_list, dims = 1:25)\n</code></pre> <p>And finally perform the integration:</p> <pre><code>seu_int &lt;- Seurat::IntegrateData(anchorset = seu_anchors, dims = 1:25)\n</code></pre> <p>After running <code>IntegrateData</code>, the <code>Seurat</code> object will contain an additional element of class <code>Assay</code> with the integrated (or \u2018batch-corrected\u2019) expression matrix. This new <code>Assay</code> is called <code>integrated</code>, and exists next to the already existing <code>RNA</code> element with class <code>Assay</code>.</p> <p>Warning</p> <p>Use the <code>Assay</code> <code>integrated</code> only for clustering and visualisation. It will give unexpected results during e.g. differential gene expression analysis. Therefore, use the <code>RNA</code> element for other analyses.</p> <p>We can then use this new integrated matrix for clustering and visualization. Now, we can scale the integrated data, run PCA, and visualize the results with UMAP.</p> <p>Note</p> <p>No need to re-run <code>FindVariableFeatures</code>, these were automatically set by calling <code>IntegrateData</code>.</p> <p>First, switch the default <code>Assay</code> to <code>integrated</code> (in stead of <code>RNA</code>).</p> <pre><code>Seurat::DefaultAssay(seu_int) &lt;- \"integrated\"\n</code></pre> <p>Exercise: In order to redo the clustering, scale the integrated data, run the PCA and the UMAP again (using the function <code>ScaleData</code>, <code>RunPCA</code> and <code>RunUMAP</code>). After that, generate the UMAP plot. Did the integration perform well?</p> Answer <p>Performing the scaling, PCA and UMAP:</p> <pre><code>seu_int &lt;- Seurat::ScaleData(seu_int)\nseu_int &lt;- Seurat::RunPCA(seu_int, npcs = 30)\nseu_int &lt;- Seurat::RunUMAP(seu_int, reduction = \"pca\", dims = 1:25)\n</code></pre> <p>Plotting the UMAP:</p> <p><pre><code>Seurat::DimPlot(seu_int, reduction = \"umap\")\n</code></pre> Returning:</p> <p> </p>"},{"location":"day2/integration/#save-the-dataset-and-clear-environment","title":"Save the dataset and clear environment","text":"<p>Finally, store the integrated dataset as an <code>.rds</code> file. We will use it tomorrow:</p> <pre><code>saveRDS(seu_int, \"seu_int_day2_part1.rds\")\n</code></pre> <p>Clear your environment:</p> <pre><code>rm(list = ls())\ngc()\n.rs.restartR()\n</code></pre>"},{"location":"day3/advanced_analyses/","title":"Advanced analyses","text":""},{"location":"day3/advanced_analyses/#material","title":"Material","text":"<p> Download the presentation</p>"},{"location":"day3/differential_gene_expression/","title":"Differential gene expression","text":""},{"location":"day3/differential_gene_expression/#material","title":"Material","text":"<p> Download the presentation</p> <ul> <li>More information on pseudobulk analysis</li> <li>Muscat for pseudobulk DGE.</li> <li>Paper on the robustness of different differential expression analysis methods</li> </ul>"},{"location":"day3/differential_gene_expression/#exercises","title":"Exercises","text":""},{"location":"day3/differential_gene_expression/#find-all-markers-for-each-cluster","title":"Find all markers for each cluster","text":"<p>Load the <code>seu_int</code> dataset you have created yesterday:</p> <pre><code>seu_int &lt;- readRDS(\"seu_int_day2_part2.rds\")\n</code></pre> <p>And load the following packages (install them if they are missing):</p> <pre><code>library(Seurat)\nlibrary(edgeR) # BiocManager::install(\"edgeR\")\nlibrary(limma)\n</code></pre> <p>The function <code>FindAllMarkers</code> performs a Wilcoxon plot to determine the genes differentially expressed between each cluster and the rest of the cells. Other types of tests than the Wilcoxon test are available. Check it out by running <code>?Seurat::FindAllMarkers</code>.</p> <p>Now run analysis:</p> <pre><code>de_genes &lt;- Seurat::FindAllMarkers(seu_int,  min.pct = 0.25,\n                                   only.pos = TRUE)\n</code></pre> <p>Time for coffee</p> <p>This takes a while. Have a break.</p> <p>Subset the table to only keep the significant genes, and you can save it as a csv file if you wish to explore it further. Then extract the top 3 markers per cluster:</p> <pre><code>de_genes &lt;- subset(de_genes, de_genes$p_val_adj&lt;0.05)\nwrite.csv(de_genes, \"de_genes_FindAllMarkers.csv\", row.names = F, quote = F)\n\n\nlibrary(dplyr)\ntop_specific_markers &lt;- de_genes %&gt;%\n  group_by(cluster) %&gt;%\n  top_n(3, avg_log2FC)\n</code></pre> <p>And generate e.g. a dotplot:</p> <pre><code>dittoSeq::dittoDotPlot(seu_int, vars = unique(top_specific_markers$gene), \n                       group.by = \"integrated_snn_res.0.3\")\n</code></pre> <p>Exercise: What are significant marker genes in cluster 0 and 8? Are the T cell genes in there?</p> <p>Hint</p> <p>You can re-load the vector with immune genes with:</p> <pre><code>tcell_genes &lt;- c(\"IL7R\", \"LTB\", \"TRAC\", \"CD3D\")\n</code></pre> Answer <p>Running</p> <pre><code>de_genes[de_genes$gene %in% tcell_genes,]\n</code></pre> <p>Returns: <pre><code>               p_val avg_log2FC pct.1 pct.2     p_val_adj cluster gene\nCD3D    0.000000e+00  2.0432771 0.768 0.228  0.000000e+00       0 CD3D\nTRAC   1.157793e-287  1.6805543 0.618 0.205 2.161947e-283       0 TRAC\nLTB    1.072643e-266  1.5215326 0.757 0.395 2.002946e-262       0  LTB\nIL7R   5.112493e-211  1.5236657 0.438 0.114 9.546557e-207       0 IL7R\nLTB.7   6.554548e-36  1.1405474 0.672 0.465  1.223931e-31       7  LTB\nTRAC.8 7.568418e-117  1.8472689 0.759 0.273 1.413251e-112       8 TRAC\nCD3D.8 3.079377e-110  1.7144870 0.800 0.326 5.750121e-106       8 CD3D\nLTB.8   1.580808e-61  1.6529117 0.774 0.461  2.951843e-57       8  LTB\nIL7R.2  4.497526e-45  1.1489439 0.458 0.173  8.398231e-41       8 IL7R\nLTB.11  2.727014e-25  0.8193337 0.750 0.467  5.092153e-21      11  LTB\n</code></pre></p> <p>So, yes, the T-cell genes are highly significant markers for cluster 0 and 8.</p>"},{"location":"day3/differential_gene_expression/#differential-expression-between-groups-of-cells","title":"Differential expression between groups of cells","text":"<p>The <code>FindMarkers</code> function allows to test for differential gene expression analysis specifically between 2 groups of cells, i.e. perform pairwise comparisons, eg between cells of cluster 0 vs cluster 2, or between cells annotated as T-cells and B-cells.</p> <p>First we can set the default cell identity to the cell types defined by <code>SingleR</code>:</p> <pre><code>seu_int &lt;- Seurat::SetIdent(seu_int, value = \"SingleR_annot\")\n</code></pre> <p>Run the differential gene expression analysis and subset the table to keep the significant genes:</p> <pre><code>deg_cd8_cd4 &lt;- Seurat::FindMarkers(seu_int,\n                                   ident.1 = \"CD8+ T cells\",\n                                   ident.2 = \"CD4+ T cells\",\n                                   group.by = seu_int$SingleR_annot,\n                                   test.use = \"wilcox\")\ndeg_cd8_cd4 &lt;- subset(deg_cd8_cd4, deg_cd8_cd4$p_val_adj&lt;0.05)\n</code></pre> <p>Exercise: Are CD8A, CD8B and CD4 in there? What does the sign (i.e. positive or negative) mean in the log fold change values? Are they according to the CD8+ and CD4+ annotations? Check your answer by generating a violin plot of a top differentially expressed gene.</p> Answer <p>You can check out the results with:</p> <pre><code>View(deg_cd8_cd4)\n</code></pre> <p>For an explanation of the log fold change have a look at <code>?Seurat::FindMarkers</code>. At Value it says:</p> <p><code>avg_logFC</code>: log fold-chage of the average expression between the two groups. Positive values indicate that the gene is more highly expressed in the first group</p> <p>To view CD8A, CD8B and CD4:</p> <pre><code>deg_cd8_cd4[c(\"CD4\", \"CD8A\", \"CD8B\"),]\n</code></pre> <p>Returning:</p> <pre><code>            p_val avg_log2FC pct.1 pct.2    p_val_adj\nCD4  1.070126e-13 -0.4000835 0.012 0.103 1.998246e-09\nCD8A 1.409306e-77  1.2956354 0.344 0.008 2.631597e-73\nCD8B 7.113148e-36  0.8536693 0.479 0.177 1.328238e-31\n</code></pre> <p>Indeed, because we compared ident.1 = \u201cCD8+ T cells\u201d to ident.2 = \u201cCD4+ T cells\u201d, a negative log2FC for the CD4 gene indicates a lower expression in CD8+ T-cells than in CD4+ T-cells, while a positive log2FC for the CD8A and CD8B genes indicates a higher expression in CD8+ T-cells.</p> <p>Plotting the genes in these two T-cell groups only:</p> <pre><code>Seurat::VlnPlot(seu_int, \n            features = c(\"CD4\", \"CD8A\", \"CD8B\"),\n            idents = c(\"CD8+ T cells\", \"CD4+ T cells\"))\n</code></pre> <p>Returning:</p> <p> </p>"},{"location":"day3/differential_gene_expression/#differential-expression-using-limma","title":"Differential expression using <code>limma</code>","text":"<p>The Wilcoxon test implemented in <code>FindMarkers</code> does not allow you to test for complex design (eg factorial experiments) or to include batch as a covariate. It doesn\u2019t allow you to run paired-sample T tests for example. </p> <p>For more complex designs, we can use <code>edgeR</code> or <code>limma</code> which are designed for microarray or bulk RNA seq data and provide a design matrix that includes covariates for example, or sample IDs for paired analyses.</p> <p>We will load an object containing only pro B cells, both from healthy tissues (PBMMC), and malignant tissues (ETV6-RUNX1). </p> <p>Warning</p> <p>Please NOTE that in the original design of this data set, the healthy and malignant tissues were not  patient-matched, i.e. the real design was not the one of paired healthy and malignant tissues. However, for demonstration purposes, we will show you how to run a paired analysis, and do as if the PBMMC-1 and ETV6-RUNX1-1 samples both came from the same patient 1, the PBMMC-2 and ETV6-RUNX1-2 samples both came from the same patient 2, etc\u2026</p> <p>We can load the object and explore its UMAP and meta.data like this:</p> <pre><code>proB &lt;- readRDS(\"course_data/proB.rds\")\n\nDimPlot(proB, group.by = \"orig.ident\")\n\ntable(proB@meta.data$type)\n# ETV6-RUNX1      PBMMC \n#      2000       1021\n\nhead(proB@meta.data)\n</code></pre> <p>Note</p> <p>If you want to know how this pro-B cell subset is generated, have a look at the script here.</p> <p>Since we will start with differential gene expression, we set the default assay back to \u201cRNA\u201d. Also, we set the default identity to the cell type:</p> <pre><code>Seurat::DefaultAssay(proB) &lt;- \"RNA\"\nSeurat::Idents(proB) &lt;- proB$orig.ident\n</code></pre> <p>Let\u2019s have a look at the UMAP (again), coloured by celltype:</p> <pre><code>Seurat::DimPlot(proB)\n</code></pre> <p>Let\u2019s say we are specifically interested to test for differential gene expression between the tumor and normal samples.</p> <p>Note</p> <p>Here we could also test for e.g. healthy versus diseased within a celltype/cluster.</p> <p>Now we will run differential expression analysis between tumor and healthy cells using the patient ID as a covariate by using <code>limma</code>.</p> <p>Prepare the pseudobulk count matrix:</p> <pre><code>#taking the proB data \nSeurat::DefaultAssay(proB) &lt;- \"RNA\"\nSeurat::Idents(proB) &lt;- proB$orig.ident\n\n## add the patient id also for paired DGE\nproB$patient.id&lt;-gsub(\"ETV6-RUNX1\", \"ETV6_RUNX1\", proB$orig.ident)\nproB$patient.id&lt;-sapply(strsplit(proB$patient.id, \"-\"), '[', 2)\n\n## Here we do perform pseudo-bulk:\n##first a mandatory column of sample needs to be added to the meta data that is the grouping factor, should be the samples\nproB$sample &lt;- factor(proB$orig.ident)\n\n##first an sce object is needed\nsce_proB &lt;- as.SingleCellExperiment(proB)\n\nlibrary(scuttle)\n\n##aggregateAcrossCells here it is only aggregated by sample, one could imagine\n##to aggregate by sample and by celltype for instance\nsummed &lt;- aggregateAcrossCells(sce_proB, \n                               id=colData(sce_proB)[,c(\"sample\")])\n\n##have a look at the counts\ncounts(summed)[1:3,]\n\n#have a look at the colData of our new object summed, can you see type and \n#patient.id are there\nhead(colData(summed))\n</code></pre> <p>Generate a <code>DGEList</code> object to use as input for <code>limma</code> and filter the genes to remove lowly expressed genes. How many are left?</p> <pre><code>#As in the standard limma analysis generate a DGE object\n\ny &lt;- DGEList(counts(summed), samples=colData(summed)$sample)\n\n##filter lowly expressed (recommanded for limma)\nkeep &lt;- filterByExpr(y, group=summed$type)\ny &lt;- y[keep,]\n\n##see how many genes were kept \nsummary(keep)\n</code></pre> <p>Generate a design matrix, including patient ID to model for a paired analysis. If you need help to generate a design matrix, check out the very nice edgeR User Guide, sections 3.3 and 3.4. Extract the sample ID from the meta.data, then create the design matrix:</p> <pre><code>## Create the design matrix and include the technology as a covariate:\ndesign &lt;- model.matrix(~0 + summed$type + summed$patient.id)\n\n# Have a look\ndesign\n\n# change column/rownames names to more simple group names: \ncolnames(design) &lt;- make.names(c(\"ETV6-RUNX1\", \"PBMMC\",\"patient2\",\"patient3\"))\nrownames(design)&lt;-colData(summed)$sample\n</code></pre> <p>Specify which contrast to analyse:</p> <pre><code>contrast.mat &lt;- limma::makeContrasts(ETV6.RUNX1 - PBMMC,\n                                     levels = design)\n</code></pre> <p>Firt, we perform TMM normalization using edgeR, and then <code>limma</code> can perform the transformation with <code>voom</code>, fit the model, compute the contrasts and compute test statistics with <code>eBayes</code>:</p> <pre><code>dge &lt;- edgeR::calcNormFactors(y)  \n\n#Do limma\nvm &lt;- limma::voom(dge, design = design, plot = TRUE)\nfit &lt;- limma::lmFit(vm, design = design)\nfit.contrasts &lt;- limma::contrasts.fit(fit, contrast.mat)\nfit.contrasts &lt;- limma::eBayes(fit.contrasts)\n</code></pre> <p>We can use <code>topTable</code> to get the most significantly differentially expressed genes, and save the full DE results to an object. How many genes are significant? Are you suprised by this number?</p> <pre><code># Show the top differentially expressed genes:\nlimma::topTable(fit.contrasts, number = 10, sort.by = \"P\")\nlimma_de &lt;- limma::topTable(fit.contrasts, number = Inf, sort.by = \"P\")\nlength(which(limma_de$adj.P.Val&lt;0.05))\n</code></pre> <p>And we can check whether this corresponds to the counts by generating a violin plot, or a gene downregulated in tumor, or a gene upregulated in tumor:</p> <pre><code>Seurat::VlnPlot(proB, \"S100A9\", split.by = \"type\")\nSeurat::VlnPlot(proB, \"SOCS2\", split.by = \"type\")\n</code></pre> <p>We can run a similar analysis with <code>Seurat</code>, but this will not take into account the paired design. Run the code below. </p> <pre><code>tum_vs_norm &lt;- Seurat::FindMarkers(proB, \n                                   ident.1 = \"ETV6-RUNX1\", \n                                   ident.2 = \"PBMMC\", \n                                   group.by = \"type\")\ntum_vs_norm &lt;- subset(tum_vs_norm, tum_vs_norm$p_val_adj&lt;0.05)\n</code></pre> <p>Exercise (extra): How many genes are significant? How does the fold change of these genes compare to the fold change of the top genes found by limma?</p> Answer <p><pre><code>dim(tum_vs_norm) \n</code></pre> We find 1893 significant genes. If we merge the <code>FindMarkers</code> and the <code>limma</code> results, keep <code>limma</code>\u2019s most significant genes and plot: <pre><code>merge_limma_FindMarkers &lt;- merge(tum_vs_norm, limma_de, by=\"row.names\",\n                           all.x=T)\n\npar(mar=c(4,4,4,4))\nplot(merge_limma_FindMarkers$avg_log2FC,\n    merge_limma_FindMarkers$logFC,\n    xlab=\"log2FC Wilcoxon\", ylab=\"log2FC limma\",\n    pch=15, cex=0.5)\nabline(a=0, b=1, col=\"red\")\n</code></pre> Returning:</p> <p> </p> <p>keep the object</p> <p>Keep the <code>tum_vs_norm</code> object because we will use this output object for the enrichment analysis in the next section.</p>"},{"location":"day3/enrichment_analysis/","title":"Enrichment analysis","text":""},{"location":"day3/enrichment_analysis/#material","title":"Material","text":"<ul> <li>MSigDB</li> <li><code>clusterProfiler</code> vignette</li> <li>Revigo</li> <li>Signaling Pathway Impact Analysis (SPIA)</li> <li>Original paper on GSEA</li> <li>STRING for protein-protein interactions</li> <li>GO figure! for plotting GO terms and the associated paper</li> </ul>"},{"location":"day3/enrichment_analysis/#exercises","title":"Exercises","text":"<p>Load the following packages:</p> <pre><code>library(clusterProfiler)\nlibrary(enrichplot)\n</code></pre> <p>If the <code>FindMarkers</code> or <code>FindAllMarkers</code> functions were used, we obtained a table listing only the significant genes, but we don\u2019t have any information of fold change for the non-significant genes. Therefore, we can use the over-representation analysis which is a threshold-based method. Using our list of significant genes, we can test if any gene set is over-represented among significant genes or not using a test similar to a Fisher test to compare differences in proportions.</p> <p>The <code>clusterProfiler</code> package provides functions for over-representation analysis of Gene Ontology gene sets (among other functions, including functions for actual GSEA) or KEGG gene sets.</p> <p>Genes can be labeled using different types of labels, eg symbol, Ensembl ID, Entrez ID. To list the allowed label types use:</p> <pre><code>BiocManager::install(\"org.Hs.eg.db\", update = FALSE)\nlibrary(org.Hs.eg.db)\nAnnotationDbi::keytypes(org.Hs.eg.db)\n</code></pre> <p>About OrgDb</p> <p>For other organisms, you can find available OrgDbs at bioconductor</p> <p>Let\u2019s select a set of genes that are downregulated in the tumor cells compared to normal:</p> <pre><code>tum_down  &lt;- subset(limma_de,\n                    limma_de$logFC &lt; -1 \n                      &amp; limma_de$adj.P.Val &lt;  0.05)\ntum_down_genes &lt;- rownames(tum_down)\n</code></pre> <p>We can do a Gene Ontology term over-representation analysis based on this set of genes. Make sure you check out the help of this function to understand its arguments:</p> <pre><code>?enrichGO\ntum_vs_norm_go &lt;- clusterProfiler::enrichGO(tum_down_genes,\n                                            \"org.Hs.eg.db\",\n                                            keyType = \"SYMBOL\",\n                                            ont = \"BP\",\n                                            minGSSize = 50)\n</code></pre> <p>The results are stored in the <code>@result</code> slot:</p> <pre><code>View(tum_vs_norm_go@result)\n</code></pre> <p>The columns <code>GeneRatio</code> and <code>BgRatio</code></p> <p>The columns <code>GeneRatio</code> and <code>BgRatio</code> that are in the <code>enrichResult</code> object represent the numbers that are used as input for the Fisher\u2019s exact test. </p> <p>The two numbers (M/N) in the <code>GeneRatio</code> column are:</p> <ul> <li>M: Number of genes of interest (in our case <code>tum_down_genes</code>) that are in the GO set</li> <li>N: Number of genes of interest with any GO annoation.</li> </ul> <p>The two numbers (k/n) in the <code>BgRatio</code> column are:</p> <ul> <li>k: Number of genes in the universe that are in the GO set</li> <li>n: Number of genes in the universe with any GO annoation</li> </ul> <p>A low p-value resulting from the Fisher\u2019s exact means that M/N is signficantly greater than k/n. </p> <p>Some GO terms seem redundant because they contain many of the same genes, which is a characteristic of Gene Ontology gene sets. We can simplify this list by removing redundant gene sets:</p> <pre><code>enr_go &lt;- clusterProfiler::simplify(tum_vs_norm_go)\nView(enr_go@result)\n</code></pre> <p>We can quite easily generate a plot called an enrichment map with the <code>enrichplot</code> package:</p> <pre><code>enrichplot::emapplot(enrichplot::pairwise_termsim(enr_go),\n                     showCategory = 30, cex_label_category = 0.5)\n</code></pre> <p>Instead of testing for Gene Ontology terms, we can also test for other gene set collections. For example the Hallmark collection from MSigDB:</p> <pre><code>gmt &lt;- msigdbr::msigdbr(species = \"human\", category = \"H\")\n</code></pre> <p>We can use the function <code>enricher</code> to test for over-representation of any set of genes of the Hallmark collection. We have to include the \u201cuniverse\u201d, i.e. the full list of background, non significant genes, against which to test for differences in proportions:</p> <pre><code>tum_vs_norm_enrich &lt;- clusterProfiler::enricher(gene = tum_down_genes,\n                                                universe = rownames(proB),\n                                                pAdjustMethod = \"BH\",\n                                                pvalueCutoff  = 0.05,\n                                                qvalueCutoff  = 0.05,\n                                                TERM2GENE = gmt[,c(\"gs_name\", \"gene_symbol\")])\n</code></pre> <p>When using the genes down-regulated in tumor, among the over-represented Hallmark gene sets, we have <code>HALLMARK_G2M_CHECKPOINT</code>, which includes genes involved in the G2/M checkpoint in the progression through the cell division cycle.</p> <pre><code>View(tum_vs_norm_enrich@result[which(tum_vs_norm_enrich@result$p.adjust&lt;0.05),])\n</code></pre>"},{"location":"day3/enrichment_analysis/#clear-environment","title":"Clear environment","text":"<p>Clear your environment:</p> <pre><code>rm(list = ls())\ngc()\n.rs.restartR()\n</code></pre>"},{"location":"day3/trajectory_analysis/","title":"Trajectory analysis (extra)","text":""},{"location":"day3/trajectory_analysis/#material","title":"Material","text":"<p> Download the presentation</p> <ul> <li><code>slingshot</code> vignette</li> <li><code>monocle3</code></li> </ul>"},{"location":"day3/trajectory_analysis/#exercises","title":"Exercises","text":"<p>Load the following packages:</p> <pre><code>library(SingleCellExperiment)\nlibrary(scater)\nlibrary(slingshot)\nlibrary(ggplot2)\nlibrary(ggbeeswarm)\n</code></pre>"},{"location":"day3/trajectory_analysis/#trajectory-analysis-using-slingshot","title":"Trajectory analysis using Slingshot","text":"<p> This part uses the <code>Deng</code> dataset</p> <p>First, download the dataset from github within your  Terminal tab as on Day 1:</p> <p>Type the following commands within the Terminal tab:</p> <pre><code>cd course_data/\nwget https://github.com/hemberg-lab/nrg-paper-figures/blob/master/deng-reads.rds?raw=true\nmv deng-reads.rds\\?raw\\=true deng-reads.rds\n</code></pre> <p>Then, within R, import the rds file. the \u2018Deng\u2019 dataset is an object of class <code>SingleCellExperiment</code>.</p> <pre><code>deng_SCE &lt;- readRDS(\"course_data/deng-reads.rds\")\n</code></pre> <p>Perform the first steps of the analysis. The deng_SCE object contains cells that were isolated at different stages of mouse embryogenesis, from the zygote stage to the late blastula.</p> <p>The levels of the cell type are in alphabetical order. We now change the level order for plotting in developmental order:</p> <pre><code>deng_SCE$cell_type2 &lt;- factor(deng_SCE$cell_type2,\n                              levels = c(\"zy\",\n                                         \"early2cell\",\n                                         \"mid2cell\",\n                                         \"late2cell\",\n                                         \"4cell\",\n                                         \"8cell\",\n                                         \"16cell\",\n                                         \"earlyblast\",\n                                         \"midblast\",\n                                         \"lateblast\"))\n</code></pre> <p>We can run a PCA directly on the object of class <code>SingleCellExperiment</code> with the function <code>runPCA</code>:</p> <pre><code>deng_SCE &lt;- scater::runPCA(deng_SCE, ncomponents = 50)\n</code></pre> <p>Use the <code>reducedDim</code> function to access the PCA and store the results.</p> <pre><code>pca &lt;- SingleCellExperiment::reducedDim(deng_SCE, \"PCA\")\n</code></pre> <p>Describe how the PCA is stored in a matrix. Why does it have this structure?</p> <pre><code>head(pca)\n</code></pre> <p>Add PCA data to the deng_SCE object.</p> <pre><code>deng_SCE$PC1 &lt;- pca[, 1]\ndeng_SCE$PC2 &lt;- pca[, 2]\n</code></pre> <p>Plot PC biplot with cells colored by cell_type2. <code>colData(deng_SCE)</code> accesses the cell metadata <code>DataFrame</code> object for <code>deng_SCE</code>. Look at Figure 1A of the paper as a comparison to your PC biplot.</p> <pre><code>ggplot(as.data.frame(colData(deng_SCE)), aes(x = PC1, y = PC2, color = cell_type2)) +\n  geom_point(size=2, shape=20) +\n  theme_classic() +\n  xlab(\"PC1\") + ylab(\"PC2\") + ggtitle(\"PC biplot\")\n</code></pre> <p>PCA is a simple approach and can be good to compare to more complex algorithms designed to capture differentiation processes. As a simple measure of pseudotime we can use the coordinates of PC1. Plot PC1 vs cell_type2.</p> <pre><code>deng_SCE$pseudotime_PC1 &lt;- rank(deng_SCE$PC1)  # rank cells by their PC1 score\n</code></pre> <p>Create a jitter plot</p> <pre><code>ggplot(as.data.frame(colData(deng_SCE)), aes(x = pseudotime_PC1, y = cell_type2,\n                                             colour = cell_type2)) +\n  ggbeeswarm::geom_quasirandom(groupOnX = FALSE) +\n  theme_classic() +\n  xlab(\"PC1\") + ylab(\"Timepoint\") +\n  ggtitle(\"Cells ordered by first principal component\")\n</code></pre> <p>Read the Slingshot documentation (<code>?slingshot::slingshot</code>) and then run Slingshot below.</p> <pre><code>sce &lt;- slingshot::slingshot(deng_SCE, reducedDim = 'PCA')\n</code></pre> <p>Exercise: Given your understanding of the algorithm and the documentation, what is one major set of parameters we omitted here when running Slingshot?</p> Answer <p>We didn\u2019t set the parameter <code>clusterLabels</code></p> <p>Here is a custom function to plot the PCA based on a <code>slingshot</code> object. Run it in the console to add it to your global environment:</p> <pre><code>PCAplot_slingshot &lt;- function(sce, draw_lines = TRUE, variable = NULL, legend = FALSE, ...){\n  # set palette for factorial variables\n  palf &lt;- colorRampPalette(RColorBrewer::brewer.pal(8, \"Set2\"))\n  # set palette for numeric variables\n  paln &lt;- colorRampPalette(RColorBrewer::brewer.pal(9, \"Blues\"))\n  # extract pca from SingleCellExperiment object\n  pca &lt;- SingleCellExperiment::reducedDims(sce)$PCA\n\n  if(is.null(variable)){\n    col &lt;- \"black\"\n  }\n  if(is.character(variable)){\n    variable &lt;- as.factor(variable)\n  }\n  if(is.factor(variable)){\n    colpal &lt;- palf(length(levels(variable)))\n    colors &lt;- colpal[variable]\n  }\n  if(is.numeric(variable)){\n    colpal &lt;- paln(50)\n    colors &lt;- colpal[cut(variable,breaks=50)]\n  }\n\n  # draw the plot\n  plot(pca, bg = colors, pch = 21)\n  # draw lines\n  if(draw_lines){\n    lines(slingshot::SlingshotDataSet(sce), lwd = 2, ... )\n  }\n  # add legend\n  if(legend &amp; is.factor(variable)){\n    legend(\"bottomright\", pt.bg = colpal,legend = levels(variable),pch=21)\n\n  }\n}\n</code></pre> <p>Have a look at the PCA with the slingshot pseudotime line:</p> <pre><code>PCAplot_slingshot(sce, variable = sce$slingPseudotime_1, draw_lines = TRUE)\n</code></pre> <p>Also have a look at pseudotime versus cell type:</p> <pre><code>ggplot(as.data.frame(colData(deng_SCE)), aes(x = sce$slingPseudotime_1,\n                                             y = cell_type2,\n                                             colour = cell_type2)) +\n  ggbeeswarm::geom_quasirandom(groupOnX = FALSE) +\n  theme_classic() +\n  xlab(\"Slingshot pseudotime\") + ylab(\"Timepoint\") +\n  ggtitle(\"Cells ordered by Slingshot pseudotime\")\n</code></pre> <p>This already looks pretty good. Let\u2019s see whether we can improve it. First we generate clusters by using <code>Seurat</code>:</p> <pre><code>gcdata &lt;- Seurat::CreateSeuratObject(counts = SingleCellExperiment::counts(deng_SCE),\n                                     project = \"slingshot\")\n\ngcdata &lt;- Seurat::NormalizeData(object = gcdata,\n                                normalization.method = \"LogNormalize\",\n                                scale.factor = 10000)\n\ngcdata &lt;- Seurat::FindVariableFeatures(object = gcdata,\n                                       mean.function = ExpMean,\n                                       dispersion.function = LogVMR)\n\ngcdata &lt;- Seurat::ScaleData(object = gcdata,\n                            do.center = T,\n                            do.scale = F)\n\ngcdata &lt;- Seurat::RunPCA(object = gcdata,\n                         pc.genes = gcdata@var.genes)\n\ngcdata &lt;- Seurat::FindNeighbors(gcdata,\n                                reduction = \"pca\",\n                                dims = 1:5)\n\n# clustering with resolution of 0.6\ngcdata &lt;- Seurat::FindClusters(object = gcdata,\n                               resolution = 0.6)\n</code></pre> <p>Now we can add these clusters to the <code>slingshot</code> function:</p> <pre><code>deng_SCE$Seurat_clusters &lt;- as.character(Idents(gcdata))  # go from factor to character\n\nsce &lt;- slingshot::slingshot(deng_SCE,\n                                 clusterLabels = 'Seurat_clusters',\n                                 reducedDim = 'PCA',\n                                 start.clus = \"2\")\n</code></pre> <p>Check how the slingshot object has evolved</p> <pre><code>SlingshotDataSet(sce)\n</code></pre> <p>Plot PC1 versus PC2 colored by slingshot pseudotime:</p> <pre><code>PCAplot_slingshot(sce, variable = sce$slingPseudotime_2)\n</code></pre> <p>Plot Slingshot pseudotime vs cell stage.</p> <pre><code>ggplot(data.frame(cell_type2 = deng_SCE$cell_type2,\n                  slingPseudotime_1 = sce$slingPseudotime_1),\n        aes(x = slingPseudotime_1, y = cell_type2,\n        colour = cell_type2)) +\n  ggbeeswarm::geom_quasirandom(groupOnX = FALSE) +\n  theme_classic() +\n  xlab(\"Slingshot pseudotime\") + ylab(\"Timepoint\") +\n  ggtitle(\"Cells ordered by Slingshot pseudotime\")\n\nggplot(data.frame(cell_type2 = deng_SCE$cell_type2,\n                  slingPseudotime_2 = sce$slingPseudotime_2),\n        aes(x = slingPseudotime_2, y = cell_type2,\n        colour = cell_type2)) +\n  ggbeeswarm::geom_quasirandom(groupOnX = FALSE) +\n  theme_classic() +\n  xlab(\"Slingshot pseudotime\") + ylab(\"Timepoint\") +\n  ggtitle(\"Cells ordered by Slingshot pseudotime\")\n</code></pre> <p>Particularly the later stages, separation seems to improve. Since we have included the Seurat clustering, we can plot the PCA, with colors according to these clusters:</p> <pre><code>PCAplot_slingshot(sce,\n                  variable = deng_SCE$Seurat_clusters,\n                  type = 'lineages',\n                  col = 'black',\n                  legend = TRUE)\n\nPCAplot_slingshot(sce,\n                  variable = deng_SCE$cell_type2,\n                  type = 'lineages',\n                  col = 'black',\n                  legend = TRUE)\n</code></pre> <p>Exercise: Instead of providing an initial cluster, think of an end cluster that would fit this trajectory analysis and perform the slingshot analysis. Does slingshot find the initial cluster corresponding to the biological correct situation?</p> Answer <pre><code>sce &lt;- slingshot::slingshot(deng_SCE,\n                             clusterLabels = 'Seurat_clusters',\n                             reducedDim = 'PCA',\n                             end.clus = c(\"0\", \"3\", \"5\")) ## check which would be the best according to bio\n</code></pre> <p>Clear your environment:</p> <pre><code>rm(list = ls())\ngc()\n.rs.restartR()\n</code></pre>"},{"location":"day3/trajectory_analysis/#trajectory-analysis-with-monocle3","title":"Trajectory analysis with <code>monocle3</code>","text":"<p>Not on the cloud server</p> <p>Currently it\u2019s not possible to use the interactive part of <code>monocole3</code> on the cloud server. Therefore, these exercises can only be performed locally. </p> <p>This part showcases how you can use <code>monocle3</code> to perform a trajectory analysis. First load the <code>seu_int</code> dataset:</p> <pre><code>seu_int &lt;- readRDS(\"seu_int_day2_part2.rds\")\n</code></pre> <p>Load the required package into your environment:</p> <pre><code>library(monocle3)\n</code></pre> <p>Generate a <code>monocle3</code> object (with class <code>cell_data_set</code>) from our <code>Seurat</code> object:</p> <pre><code># get matrix and filter for minimum number of cells and features (the latter is a fix for backward compatibility)\nmat_tmp &lt;- seu_int@assays$RNA@counts\nseu_tmp &lt;- Seurat::CreateSeuratObject(mat_tmp, min.cells = 3,\n                                      min.features = 100)\n\nfeature_names &lt;- as.data.frame(rownames(seu_tmp))\nrownames(feature_names) &lt;- rownames(seu_tmp)\ncolnames(feature_names) &lt;- \"gene_short_name\"\n\nseu_int_monocl &lt;- monocle3::new_cell_data_set(seu_tmp@assays$RNA@counts,\n                                              cell_metadata = seu_int@meta.data,\n                                              gene_metadata = feature_names)\n</code></pre> <p>We pre-process the newly created object. What does it involve? Check:</p> <pre><code>?preprocess_cds\n</code></pre> <p>Preprocess the dataset:</p> <pre><code>seu_int_monocl &lt;- monocle3::preprocess_cds(seu_int_monocl)\n</code></pre> <p>And check out the elbow plot:</p> <pre><code>monocle3::plot_pc_variance_explained(seu_int_monocl)\n</code></pre> <p>Perform UMAP using the implementation in the <code>monocle3</code> package and its default parameters:</p> <pre><code>seu_int_monocl &lt;- monocle3::reduce_dimension(seu_int_monocl, reduction_method = \"UMAP\")\n</code></pre> <p>Plot the <code>monocle3</code> UMAP coloring cells according to the cluster ID ran with <code>Seurat</code>:</p> <pre><code>monocle3::plot_cells(seu_int_monocl, \n                     color_cells_by = \"integrated_snn_res.0.3\", \n                     cell_size = 1, \n                     show_trajectory_graph = FALSE)\n\nmonocle3::plot_cells(seu_int_monocl, genes = \"CD79A\", \n                     show_trajectory_graph = FALSE, \n                     cell_size = 1)\n</code></pre> <p>Cluster cells using <code>monocle3</code>\u2019s clustering function:</p> <pre><code>seu_int_monocl &lt;- monocle3::cluster_cells(seu_int_monocl, resolution=0.00025)\nmonocle3::plot_cells(seu_int_monocl, label_cell_groups = F)\n</code></pre> <p>learn graph (i.e. identify trajectory) using <code>monocle3</code> UMAP and clustering:</p> <pre><code>seu_int_monocl &lt;- monocle3::learn_graph(seu_int_monocl)\nmonocle3::plot_cells(seu_int_monocl)\n</code></pre> <p>Exercise: Find the CD34+ B-cell cluster in the monocle UMAP. This cluster has a high expressession of CD79A and expresses CD34.</p> Answer <pre><code>monocle3::plot_cells(seu_int_monocl, genes = c(\"CD79A\", \"CD34\"),\n                 show_trajectory_graph = FALSE, \n                 cell_size = 0.7, group_label_size = 4)\n</code></pre> <p>Returns:</p> <p> </p> <p>The left part of cluster 7 has both a high expression of CD79A and CD34. </p> <p>Select the \u201cinitial\u201d cells in the B-cell cluster to calculate pseudotime. The initial cells in this case are the CD34+ B-cells we have just identified. A pop up window will open and you need to click on the \u201cinitial\u201d cells (one node per trajectory), then click \u201cDone\u201d.</p> <pre><code>seu_int_monocl&lt;-monocle3::order_cells(seu_int_monocl)#\n</code></pre> <pre><code>monocle3::plot_cells(seu_int_monocl,\n           color_cells_by = \"pseudotime\",\n           label_cell_groups=F,\n           label_leaves=F,\n           label_branch_points=FALSE,\n           graph_label_size=1.5, cell_size = 1)\n</code></pre> <p>In order to find genes which expression is affected by pseudtime, we first have to isolate the B-cell cluster. Therefore, extract all cells in the B-cell cluster with the interactive <code>choose_cells</code> function:</p> <pre><code>seuB &lt;- choose_cells(seu_int_monocl)\n</code></pre> <p>Check whether you have selected the right cells:</p> <pre><code>plot_cells(seuB, show_trajectory_graph = FALSE, cell_size = 1)\n</code></pre> <p>Now we can use the cells in this trajectory to test which genes are affected by the trajectory:</p> <pre><code>pr_test &lt;- graph_test(seuB, \n                      cores=4, \n                      neighbor_graph = \"principal_graph\")\n# order by test statistic\npr_test &lt;- pr_test[order(pr_test$morans_test_statistic, \n                         decreasing = TRUE),]\nView(pr_test)\n</code></pre> <p>There are some interesting genes in there, for example related to cell cycling (MKI67, CKS2), related to B-cell development (CD34, MS4A1) and immunoglobulins (IGLL1 and IGLL5). We can plot those in the UMAP:</p> <pre><code>goi &lt;- c(\"CD34\", \"MS4A1\", \"IGLL1\", \"IGLL5\", \n         \"MKI67\", \"CKS2\")\nplot_cells(seuB, label_cell_groups=FALSE, genes = goi,\n           show_trajectory_graph=FALSE, cell_size = 1)\n</code></pre> <p>But also against pseudotime:</p> <pre><code>seuB@colData$monocle_cluster &lt;- clusters(seuB)\n\nplot_genes_in_pseudotime(subset(seuB, \n                                rowData(seuB)$gene_short_name %in% goi),\n                         min_expr=0.5, color_cells_by = \"monocle_cluster\")\n</code></pre>"}]}